package vss

import (
	"fmt"
	"time"
)

// This file is automatically populated with conversion functions for each field of the model struct.
// any conversion functions already defined in this package will not be generated.
// Code generated by model-garage.

// ToChassisAxleRow1WheelLeftTirePressure0 converts data from field 'tires.frontLeft' of type float64 to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
func ToChassisAxleRow1WheelLeftTirePressure0(val float64) (float64, error) {
	return val, nil
}

// ToChassisAxleRow1WheelRightTirePressure0 converts data from field 'tires.frontRight' of type float64 to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
func ToChassisAxleRow1WheelRightTirePressure0(val float64) (float64, error) {
	return val, nil
}

// ToChassisAxleRow2WheelLeftTirePressure0 converts data from field 'tires.backLeft' of type float64 to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
func ToChassisAxleRow2WheelLeftTirePressure0(val float64) (float64, error) {
	return val, nil
}

// ToChassisAxleRow2WheelRightTirePressure0 converts data from field 'tires.backRight' of type float64 to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
func ToChassisAxleRow2WheelRightTirePressure0(val float64) (float64, error) {
	return val, nil
}

// ToCurrentLocationAltitude0 converts data from field 'altitude' of type float64 to 'Vehicle.CurrentLocation.Altitude' of type float64.
func ToCurrentLocationAltitude0(val float64) (float64, error) {
	return val, nil
}

// ToCurrentLocationLatitude0 converts data from field 'latitude' of type float64 to 'Vehicle.CurrentLocation.Latitude' of type float64.
func ToCurrentLocationLatitude0(val float64) (float64, error) {
	return val, nil
}

// ToCurrentLocationLongitude0 converts data from field 'longitude' of type float64 to 'Vehicle.CurrentLocation.Longitude' of type float64.
func ToCurrentLocationLongitude0(val float64) (float64, error) {
	return val, nil
}

// ToCurrentLocationTimestamp0 converts data from field 'timestamp' of type string to 'Vehicle.CurrentLocation.Timestamp' of type float64.
func ToCurrentLocationTimestamp0(val string) (float64, error) {
	ts, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return 0, fmt.Errorf("error parsing time: %w", err)
	}
	return float64(ts.UTC().Unix()), nil
}

// ToCurrentLocationTimestamp1 converts data from field 'timestamp' of type float64 to 'Vehicle.CurrentLocation.Timestamp' of type float64.
func ToCurrentLocationTimestamp1(val float64) (float64, error) {
	return val, nil
}

// ToDIMOAftermarketHDOP0 converts data from field 'hdop' of type float64 to 'Vehicle.DIMO.Aftermarket.HDOP' of type float64.
func ToDIMOAftermarketHDOP0(val float64) (float64, error) {
	return val, nil
}

// ToDIMOAftermarketNSAT0 converts data from field 'nsat' of type float64 to 'Vehicle.DIMO.Aftermarket.NSAT' of type float64.
func ToDIMOAftermarketNSAT0(val float64) (float64, error) {
	return val, nil
}

// ToDIMOAftermarketSSID0 converts data from field 'ssid' of type string to 'Vehicle.DIMO.Aftermarket.SSID' of type string.
func ToDIMOAftermarketSSID0(val string) (string, error) {
	return val, nil
}

// ToDIMOAftermarketWPAState0 converts data from field 'wpa_state' of type string to 'Vehicle.DIMO.Aftermarket.WPAState' of type string.
func ToDIMOAftermarketWPAState0(val string) (string, error) {
	return val, nil
}

// ToDIMOIsLocationRedacted0 converts data from field 'isRedacted' of type bool to 'Vehicle.DIMO.IsLocationRedacted' of type float64.
func ToDIMOIsLocationRedacted0(val bool) (float64, error) {
	if val {
		return 1, nil
	}
	return 0, nil
}

// ToExteriorAirTemperature0 converts data from field 'ambientTemp' of type float64 to 'Vehicle.Exterior.AirTemperature' of type float64.
func ToExteriorAirTemperature0(val float64) (float64, error) {
	return val, nil
}

// ToLowVoltageBatteryCurrentVoltage0 converts data from field 'batteryVoltage' of type float64 to 'Vehicle.LowVoltageBattery.CurrentVoltage' of type float64.
func ToLowVoltageBatteryCurrentVoltage0(val float64) (float64, error) {
	return val, nil
}

// ToOBDBarometricPressure0 converts data from field 'barometricPressure' of type float64 to 'Vehicle.OBD.BarometricPressure' of type float64.
func ToOBDBarometricPressure0(val float64) (float64, error) {
	return val, nil
}

// ToOBDEngineLoad0 converts data from field 'engineLoad' of type float64 to 'Vehicle.OBD.EngineLoad' of type float64.
func ToOBDEngineLoad0(val float64) (float64, error) {
	return val, nil
}

// ToOBDIntakeTemp0 converts data from field 'intakeTemp' of type float64 to 'Vehicle.OBD.IntakeTemp' of type float64.
func ToOBDIntakeTemp0(val float64) (float64, error) {
	return val, nil
}

// ToOBDRunTime0 converts data from field 'runTime' of type float64 to 'Vehicle.OBD.RunTime' of type float64.
func ToOBDRunTime0(val float64) (float64, error) {
	return val, nil
}

// ToPowertrainCombustionEngineECT0 converts data from field 'coolantTemp' of type float64 to 'Vehicle.Powertrain.CombustionEngine.ECT' of type float64.
func ToPowertrainCombustionEngineECT0(val float64) (float64, error) {
	return val, nil
}

// ToPowertrainCombustionEngineEngineOilLevel0 converts data from field 'oil' of type float64 to 'Vehicle.Powertrain.CombustionEngine.EngineOilLevel' of type string.
func ToPowertrainCombustionEngineEngineOilLevel0(oilLevel float64) (string, error) {
	switch {
	case oilLevel < 0.25:
		return "CRITICALLY_LOW", nil
	case oilLevel < 0.5:
		return "LOW", nil
	case oilLevel < 0.75:
		return "NORMAL", nil
	case oilLevel < .99:
		return "HIGH", nil
	default:
		return "CRITICALLY_HIGH", nil
	}
}

// ToPowertrainCombustionEngineMAF0 converts data from field 'maf' of type float64 to 'Vehicle.Powertrain.CombustionEngine.MAF' of type float64.
func ToPowertrainCombustionEngineMAF0(val float64) (float64, error) {
	return val, nil
}

// ToPowertrainCombustionEngineSpeed0 converts data from field 'engineSpeed' of type float64 to 'Vehicle.Powertrain.CombustionEngine.Speed' of type float64.
func ToPowertrainCombustionEngineSpeed0(val float64) (float64, error) {
	return val, nil
}

// ToPowertrainCombustionEngineTPS0 converts data from field 'throttlePosition' of type float64 to 'Vehicle.Powertrain.CombustionEngine.TPS' of type float64.
func ToPowertrainCombustionEngineTPS0(val float64) (float64, error) {
	return val, nil
}

// ToPowertrainFuelSystemAbsoluteLevel0 converts data from field 'fuelPercentRemaining' of type float64 to 'Vehicle.Powertrain.FuelSystem.AbsoluteLevel' of type float64.
func ToPowertrainFuelSystemAbsoluteLevel0(val float64) (float64, error) {
	return val, nil
}

// ToPowertrainFuelSystemSupportedFuelTypes0 converts data from field 'fuelType' of type string to 'Vehicle.Powertrain.FuelSystem.SupportedFuelTypes' of type string.
func ToPowertrainFuelSystemSupportedFuelTypes0(val string) (string, error) {
	switch val {
	case "Gasoline":
		return "GASOLINE", nil
	case "Ethanol":
		return "E85", nil
	case "Diesel":
		return "DIESEL", nil
	case "LPG":
		return "LPG", nil
	default:
		return "OTHER", nil
	}
}

// ToPowertrainRange0 converts data from field 'range' of type float64 to 'Vehicle.Powertrain.Range' of type float64.
func ToPowertrainRange0(val float64) (float64, error) {
	return val, nil
}

// ToPowertrainTractionBatteryChargingChargeLimit0 converts data from field 'chargeLimit' of type float64 to 'Vehicle.Powertrain.TractionBattery.Charging.ChargeLimit' of type float64.
func ToPowertrainTractionBatteryChargingChargeLimit0(val float64) (float64, error) {
	return val, nil
}

// ToPowertrainTractionBatteryChargingIsCharging0 converts data from field 'charging' of type bool to 'Vehicle.Powertrain.TractionBattery.Charging.IsCharging' of type float64.
func ToPowertrainTractionBatteryChargingIsCharging0(val bool) (float64, error) {
	if val {
		return 1, nil
	}
	return 0, nil
}

// ToPowertrainTractionBatteryCurrentPower0 converts data from field 'charger.power' of type float64 to 'Vehicle.Powertrain.TractionBattery.CurrentPower' of type float64.
func ToPowertrainTractionBatteryCurrentPower0(val float64) (float64, error) {
	// V1 field is in kilowatts (kW), VSS field is in watts (W).
	return 1000 * val, nil
}

// ToPowertrainTractionBatteryGrossCapacity0 converts data from field 'batteryCapacity' of type float64 to 'Vehicle.Powertrain.TractionBattery.GrossCapacity' of type float64.
func ToPowertrainTractionBatteryGrossCapacity0(val float64) (float64, error) {
	return val, nil
}

// ToPowertrainTractionBatteryStateOfChargeCurrent0 converts data from field 'soc' of type float64 to 'Vehicle.Powertrain.TractionBattery.StateOfCharge.Current' of type float64.
func ToPowertrainTractionBatteryStateOfChargeCurrent0(val float64) (float64, error) {
	return val, nil
}

// ToPowertrainTransmissionTravelledDistance0 converts data from field 'odometer' of type float64 to 'Vehicle.Powertrain.Transmission.TravelledDistance' of type float64.
func ToPowertrainTransmissionTravelledDistance0(val float64) (float64, error) {
	return val, nil
}

// ToPowertrainType0 converts data from field 'fuelType' of type string to 'Vehicle.Powertrain.Type' of type string.
func ToPowertrainType0(val string) (string, error) {
	// possible arguments Gasoline, Ethanol, Diesel, Not available, Electric, LPG
	// deault to combustion
	if val == "Electric" {
		return "ELECTRIC", nil
	}
	return "COMBUSTION", nil
}

// ToSpeed0 converts data from field 'speed' of type float64 to 'Vehicle.Speed' of type float64.
func ToSpeed0(val float64) (float64, error) {
	return val, nil
}

// ToVehicleIdentificationBrand0 converts data from field 'make' of type string to 'Vehicle.VehicleIdentification.Brand' of type string.
func ToVehicleIdentificationBrand0(val string) (string, error) {
	return val, nil
}

// ToVehicleIdentificationModel0 converts data from field 'model' of type string to 'Vehicle.VehicleIdentification.Model' of type string.
func ToVehicleIdentificationModel0(val string) (string, error) {
	return val, nil
}

// ToVehicleIdentificationYear0 converts data from field 'year' of type float64 to 'Vehicle.VehicleIdentification.Year' of type float64.
func ToVehicleIdentificationYear0(val float64) (float64, error) {
	return val, nil
}
