// Code generated by "model-garage" DO NOT EDIT.
package vss

import (
	"errors"
	"fmt"

	"github.com/tidwall/gjson"
)

var (
	// errInvalidType is returned when a field is not of the expected type or not found.
	errInvalidType = errors.New("invalid type")

	// errNotFound is returned when a field is not found.
	errNotFound = errors.New("not found")
)

// IsNotFound returns true if the error is of type errNotFound.
func IsNotFound(err error) bool {
	return errors.Is(err, errNotFound)
}

// IsInvalidType returns true if the error is of type errInvalidType.
func IsInvalidType(err error) bool {
	return errors.Is(err, errInvalidType)
}

// FromData creates a new Vehicle from a map of data. Using defined conversion functions.
// If skipNotFound is true, the function will not return an error if a key is not found.
// instead the field will be set to the zero value of the type.
func FromData(jsonData []byte, skipNotFound bool) (*Vehicle, error) {
	vehicle := Vehicle{}

	var err error
	var result gjson.Result

	// convert data.tires.frontLeft to ChassisAxleRow1WheelLeftTirePressure
	result = gjson.GetBytes(jsonData, "data.tires.frontLeft")
	if result.Exists() {
		valChassisAxleRow1WheelLeftTirePressure, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.tires.frontLeft' is not of type float64", errInvalidType)
		}
		vehicle.ChassisAxleRow1WheelLeftTirePressure, err = ToChassisAxleRow1WheelLeftTirePressure(valChassisAxleRow1WheelLeftTirePressure)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.tires.frontLeft': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.tires.frontLeft'", errNotFound)
	}

	// convert data.tires.frontRight to ChassisAxleRow1WheelRightTirePressure
	result = gjson.GetBytes(jsonData, "data.tires.frontRight")
	if result.Exists() {
		valChassisAxleRow1WheelRightTirePressure, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.tires.frontRight' is not of type float64", errInvalidType)
		}
		vehicle.ChassisAxleRow1WheelRightTirePressure, err = ToChassisAxleRow1WheelRightTirePressure(valChassisAxleRow1WheelRightTirePressure)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.tires.frontRight': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.tires.frontRight'", errNotFound)
	}

	// convert data.tires.backLeft to ChassisAxleRow2WheelLeftTirePressure
	result = gjson.GetBytes(jsonData, "data.tires.backLeft")
	if result.Exists() {
		valChassisAxleRow2WheelLeftTirePressure, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.tires.backLeft' is not of type float64", errInvalidType)
		}
		vehicle.ChassisAxleRow2WheelLeftTirePressure, err = ToChassisAxleRow2WheelLeftTirePressure(valChassisAxleRow2WheelLeftTirePressure)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.tires.backLeft': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.tires.backLeft'", errNotFound)
	}

	// convert data.tires.backRight to ChassisAxleRow2WheelRightTirePressure
	result = gjson.GetBytes(jsonData, "data.tires.backRight")
	if result.Exists() {
		valChassisAxleRow2WheelRightTirePressure, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.tires.backRight' is not of type float64", errInvalidType)
		}
		vehicle.ChassisAxleRow2WheelRightTirePressure, err = ToChassisAxleRow2WheelRightTirePressure(valChassisAxleRow2WheelRightTirePressure)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.tires.backRight': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.tires.backRight'", errNotFound)
	}

	// convert data.altitude to CurrentLocationAltitude
	result = gjson.GetBytes(jsonData, "data.altitude")
	if result.Exists() {
		valCurrentLocationAltitude, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.altitude' is not of type float64", errInvalidType)
		}
		vehicle.CurrentLocationAltitude, err = ToCurrentLocationAltitude(valCurrentLocationAltitude)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.altitude': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.altitude'", errNotFound)
	}

	// convert data.latitude to CurrentLocationLatitude
	result = gjson.GetBytes(jsonData, "data.latitude")
	if result.Exists() {
		valCurrentLocationLatitude, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.latitude' is not of type float64", errInvalidType)
		}
		vehicle.CurrentLocationLatitude, err = ToCurrentLocationLatitude(valCurrentLocationLatitude)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.latitude': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.latitude'", errNotFound)
	}

	// convert data.longitude to CurrentLocationLongitude
	result = gjson.GetBytes(jsonData, "data.longitude")
	if result.Exists() {
		valCurrentLocationLongitude, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.longitude' is not of type float64", errInvalidType)
		}
		vehicle.CurrentLocationLongitude, err = ToCurrentLocationLongitude(valCurrentLocationLongitude)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.longitude': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.longitude'", errNotFound)
	}

	// convert data.timestamp to CurrentLocationTimestamp
	result = gjson.GetBytes(jsonData, "data.timestamp")
	if result.Exists() {
		valCurrentLocationTimestamp, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.timestamp' is not of type string", errInvalidType)
		}
		vehicle.CurrentLocationTimestamp, err = ToCurrentLocationTimestamp(valCurrentLocationTimestamp)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.timestamp': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.timestamp'", errNotFound)
	}

	// convert data.definitionID to DIMODefinitionID
	result = gjson.GetBytes(jsonData, "data.definitionID")
	if result.Exists() {
		valDIMODefinitionID, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.definitionID' is not of type string", errInvalidType)
		}
		vehicle.DIMODefinitionID, err = ToDIMODefinitionID(valDIMODefinitionID)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.definitionID': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.definitionID'", errNotFound)
	}

	// convert source to DIMOSource
	result = gjson.GetBytes(jsonData, "source")
	if result.Exists() {
		valDIMOSource, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'source' is not of type string", errInvalidType)
		}
		vehicle.DIMOSource, err = ToDIMOSource(valDIMOSource)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'source': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'source'", errNotFound)
	}

	// convert subject to DIMOSubject
	result = gjson.GetBytes(jsonData, "subject")
	if result.Exists() {
		valDIMOSubject, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'subject' is not of type string", errInvalidType)
		}
		vehicle.DIMOSubject, err = ToDIMOSubject(valDIMOSubject)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'subject': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'subject'", errNotFound)
	}

	// convert time to DIMOTimestamp
	result = gjson.GetBytes(jsonData, "time")
	if result.Exists() {
		valDIMOTimestamp, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'time' is not of type string", errInvalidType)
		}
		vehicle.DIMOTimestamp, err = ToDIMOTimestamp(valDIMOTimestamp)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'time': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'time'", errNotFound)
	}

	// convert type to DIMOType
	result = gjson.GetBytes(jsonData, "type")
	if result.Exists() {
		valDIMOType, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'type' is not of type string", errInvalidType)
		}
		vehicle.DIMOType, err = ToDIMOType(valDIMOType)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'type': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'type'", errNotFound)
	}

	// convert data.vehicleID to DIMOVehicleID
	result = gjson.GetBytes(jsonData, "data.vehicleID")
	if result.Exists() {
		valDIMOVehicleID, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.vehicleID' is not of type string", errInvalidType)
		}
		vehicle.DIMOVehicleID, err = ToDIMOVehicleID(valDIMOVehicleID)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.vehicleID': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.vehicleID'", errNotFound)
	}

	// convert data.ambientTemp to ExteriorAirTemperature
	result = gjson.GetBytes(jsonData, "data.ambientTemp")
	if result.Exists() {
		valExteriorAirTemperature, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.ambientTemp' is not of type float64", errInvalidType)
		}
		vehicle.ExteriorAirTemperature, err = ToExteriorAirTemperature(valExteriorAirTemperature)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.ambientTemp': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.ambientTemp'", errNotFound)
	}

	// convert data.batteryVoltage to LowVoltageBatteryCurrentVoltage
	result = gjson.GetBytes(jsonData, "data.batteryVoltage")
	if result.Exists() {
		valLowVoltageBatteryCurrentVoltage, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.batteryVoltage' is not of type float64", errInvalidType)
		}
		vehicle.LowVoltageBatteryCurrentVoltage, err = ToLowVoltageBatteryCurrentVoltage(valLowVoltageBatteryCurrentVoltage)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.batteryVoltage': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.batteryVoltage'", errNotFound)
	}

	// convert data.barometricPressure to OBDBarometricPressure
	result = gjson.GetBytes(jsonData, "data.barometricPressure")
	if result.Exists() {
		valOBDBarometricPressure, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.barometricPressure' is not of type float64", errInvalidType)
		}
		vehicle.OBDBarometricPressure, err = ToOBDBarometricPressure(valOBDBarometricPressure)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.barometricPressure': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.barometricPressure'", errNotFound)
	}

	// convert data.engineLoad to OBDEngineLoad
	result = gjson.GetBytes(jsonData, "data.engineLoad")
	if result.Exists() {
		valOBDEngineLoad, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.engineLoad' is not of type float64", errInvalidType)
		}
		vehicle.OBDEngineLoad, err = ToOBDEngineLoad(valOBDEngineLoad)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.engineLoad': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.engineLoad'", errNotFound)
	}

	// convert data.intakeTemp to OBDIntakeTemp
	result = gjson.GetBytes(jsonData, "data.intakeTemp")
	if result.Exists() {
		valOBDIntakeTemp, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.intakeTemp' is not of type float64", errInvalidType)
		}
		vehicle.OBDIntakeTemp, err = ToOBDIntakeTemp(valOBDIntakeTemp)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.intakeTemp': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.intakeTemp'", errNotFound)
	}

	// convert data.runTime to OBDRunTime
	result = gjson.GetBytes(jsonData, "data.runTime")
	if result.Exists() {
		valOBDRunTime, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.runTime' is not of type float64", errInvalidType)
		}
		vehicle.OBDRunTime, err = ToOBDRunTime(valOBDRunTime)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.runTime': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.runTime'", errNotFound)
	}

	// convert data.coolantTemp to PowertrainCombustionEngineECT
	result = gjson.GetBytes(jsonData, "data.coolantTemp")
	if result.Exists() {
		valPowertrainCombustionEngineECT, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.coolantTemp' is not of type float64", errInvalidType)
		}
		vehicle.PowertrainCombustionEngineECT, err = ToPowertrainCombustionEngineECT(valPowertrainCombustionEngineECT)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.coolantTemp': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.coolantTemp'", errNotFound)
	}

	// convert data.oil to PowertrainCombustionEngineEngineOilLevel
	result = gjson.GetBytes(jsonData, "data.oil")
	if result.Exists() {
		valPowertrainCombustionEngineEngineOilLevel, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.oil' is not of type float64", errInvalidType)
		}
		vehicle.PowertrainCombustionEngineEngineOilLevel, err = ToPowertrainCombustionEngineEngineOilLevel(valPowertrainCombustionEngineEngineOilLevel)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.oil': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.oil'", errNotFound)
	}

	// convert data.engineSpeed to PowertrainCombustionEngineSpeed
	result = gjson.GetBytes(jsonData, "data.engineSpeed")
	if result.Exists() {
		valPowertrainCombustionEngineSpeed, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.engineSpeed' is not of type float64", errInvalidType)
		}
		vehicle.PowertrainCombustionEngineSpeed, err = ToPowertrainCombustionEngineSpeed(valPowertrainCombustionEngineSpeed)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.engineSpeed': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.engineSpeed'", errNotFound)
	}

	// convert data.throttlePosition to PowertrainCombustionEngineTPS
	result = gjson.GetBytes(jsonData, "data.throttlePosition")
	if result.Exists() {
		valPowertrainCombustionEngineTPS, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.throttlePosition' is not of type float64", errInvalidType)
		}
		vehicle.PowertrainCombustionEngineTPS, err = ToPowertrainCombustionEngineTPS(valPowertrainCombustionEngineTPS)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.throttlePosition': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.throttlePosition'", errNotFound)
	}

	// convert data.fuelPercentRemaining to PowertrainFuelSystemAbsoluteLevel
	result = gjson.GetBytes(jsonData, "data.fuelPercentRemaining")
	if result.Exists() {
		valPowertrainFuelSystemAbsoluteLevel, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.fuelPercentRemaining' is not of type float64", errInvalidType)
		}
		vehicle.PowertrainFuelSystemAbsoluteLevel, err = ToPowertrainFuelSystemAbsoluteLevel(valPowertrainFuelSystemAbsoluteLevel)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.fuelPercentRemaining': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.fuelPercentRemaining'", errNotFound)
	}

	// convert data.fuelType to PowertrainFuelSystemSupportedFuelTypes
	result = gjson.GetBytes(jsonData, "data.fuelType")
	if result.Exists() {
		valPowertrainFuelSystemSupportedFuelTypes, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.fuelType' is not of type string", errInvalidType)
		}
		vehicle.PowertrainFuelSystemSupportedFuelTypes, err = ToPowertrainFuelSystemSupportedFuelTypes(valPowertrainFuelSystemSupportedFuelTypes)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.fuelType': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.fuelType'", errNotFound)
	}

	// convert data.range to PowertrainRange
	result = gjson.GetBytes(jsonData, "data.range")
	if result.Exists() {
		valPowertrainRange, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.range' is not of type float64", errInvalidType)
		}
		vehicle.PowertrainRange, err = ToPowertrainRange(valPowertrainRange)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.range': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.range'", errNotFound)
	}

	// convert data.chargeLimit to PowertrainTractionBatteryChargingChargeLimit
	result = gjson.GetBytes(jsonData, "data.chargeLimit")
	if result.Exists() {
		valPowertrainTractionBatteryChargingChargeLimit, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.chargeLimit' is not of type float64", errInvalidType)
		}
		vehicle.PowertrainTractionBatteryChargingChargeLimit, err = ToPowertrainTractionBatteryChargingChargeLimit(valPowertrainTractionBatteryChargingChargeLimit)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.chargeLimit': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.chargeLimit'", errNotFound)
	}

	// convert data.charging to PowertrainTractionBatteryChargingIsCharging
	result = gjson.GetBytes(jsonData, "data.charging")
	if result.Exists() {
		valPowertrainTractionBatteryChargingIsCharging, ok := result.Value().(bool)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.charging' is not of type bool", errInvalidType)
		}
		vehicle.PowertrainTractionBatteryChargingIsCharging, err = ToPowertrainTractionBatteryChargingIsCharging(valPowertrainTractionBatteryChargingIsCharging)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.charging': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.charging'", errNotFound)
	}

	// convert data.batteryCapacity to PowertrainTractionBatteryGrossCapacity
	result = gjson.GetBytes(jsonData, "data.batteryCapacity")
	if result.Exists() {
		valPowertrainTractionBatteryGrossCapacity, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.batteryCapacity' is not of type float64", errInvalidType)
		}
		vehicle.PowertrainTractionBatteryGrossCapacity, err = ToPowertrainTractionBatteryGrossCapacity(valPowertrainTractionBatteryGrossCapacity)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.batteryCapacity': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.batteryCapacity'", errNotFound)
	}

	// convert data.soc to PowertrainTractionBatteryStateOfChargeCurrent
	result = gjson.GetBytes(jsonData, "data.soc")
	if result.Exists() {
		valPowertrainTractionBatteryStateOfChargeCurrent, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.soc' is not of type float64", errInvalidType)
		}
		vehicle.PowertrainTractionBatteryStateOfChargeCurrent, err = ToPowertrainTractionBatteryStateOfChargeCurrent(valPowertrainTractionBatteryStateOfChargeCurrent)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.soc': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.soc'", errNotFound)
	}

	// convert data.odometer to PowertrainTransmissionTravelledDistance
	result = gjson.GetBytes(jsonData, "data.odometer")
	if result.Exists() {
		valPowertrainTransmissionTravelledDistance, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.odometer' is not of type float64", errInvalidType)
		}
		vehicle.PowertrainTransmissionTravelledDistance, err = ToPowertrainTransmissionTravelledDistance(valPowertrainTransmissionTravelledDistance)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.odometer': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.odometer'", errNotFound)
	}

	// convert data.fuelType to PowertrainType
	result = gjson.GetBytes(jsonData, "data.fuelType")
	if result.Exists() {
		valPowertrainType, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.fuelType' is not of type string", errInvalidType)
		}
		vehicle.PowertrainType, err = ToPowertrainType(valPowertrainType)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.fuelType': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.fuelType'", errNotFound)
	}

	// convert data.speed to Speed
	result = gjson.GetBytes(jsonData, "data.speed")
	if result.Exists() {
		valSpeed, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.speed' is not of type float64", errInvalidType)
		}
		vehicle.Speed, err = ToSpeed(valSpeed)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.speed': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.speed'", errNotFound)
	}

	// convert data.make to VehicleIdentificationBrand
	result = gjson.GetBytes(jsonData, "data.make")
	if result.Exists() {
		valVehicleIdentificationBrand, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.make' is not of type string", errInvalidType)
		}
		vehicle.VehicleIdentificationBrand, err = ToVehicleIdentificationBrand(valVehicleIdentificationBrand)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.make': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.make'", errNotFound)
	}

	// convert data.model to VehicleIdentificationModel
	result = gjson.GetBytes(jsonData, "data.model")
	if result.Exists() {
		valVehicleIdentificationModel, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.model' is not of type string", errInvalidType)
		}
		vehicle.VehicleIdentificationModel, err = ToVehicleIdentificationModel(valVehicleIdentificationModel)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.model': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.model'", errNotFound)
	}

	// convert data.vin to VehicleIdentificationVIN
	result = gjson.GetBytes(jsonData, "data.vin")
	if result.Exists() {
		valVehicleIdentificationVIN, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.vin' is not of type string", errInvalidType)
		}
		vehicle.VehicleIdentificationVIN, err = ToVehicleIdentificationVIN(valVehicleIdentificationVIN)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.vin': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.vin'", errNotFound)
	}

	// convert data.year to VehicleIdentificationYear
	result = gjson.GetBytes(jsonData, "data.year")
	if result.Exists() {
		valVehicleIdentificationYear, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.year' is not of type float64", errInvalidType)
		}
		vehicle.VehicleIdentificationYear, err = ToVehicleIdentificationYear(valVehicleIdentificationYear)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.year': %w", err)
		}
	} else if !skipNotFound {
		return nil, fmt.Errorf("%w, field 'data.year'", errNotFound)
	}
	return &vehicle, nil
}
