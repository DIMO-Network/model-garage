// Code generated by "model-garage" DO NOT EDIT.
package vss

import (
	"errors"
	"fmt"

	"github.com/tidwall/gjson"
)

var (
	// errInvalidType is returned when a field is not of the expected type or not found.
	errInvalidType = errors.New("invalid type")
)

// IsInvalidType returns true if the error is of type errInvalidType.
func IsInvalidType(err error) bool {
	return errors.Is(err, errInvalidType)
}

// FromData creates a new Dimo from a map of data. Using defined conversion functions.
// If skipNotFound is true, the function will not return an error if a key is not found.
// instead the field will be set to the zero value of the type.
func FromData(jsonData []byte) (*Dimo, error) {

	dimo := Dimo{}

	var err error
	var result gjson.Result

	// convert data.definitionID to DefinitionID
	result = gjson.GetBytes(jsonData, "data.definitionID")
	if result.Exists() {
		valDefinitionID, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.definitionID' is not of type string", errInvalidType)
		}
		dimo.DefinitionID, err = ToDefinitionID(valDefinitionID)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.definitionID': %w", err)
		}
	}

	// convert source to Source
	result = gjson.GetBytes(jsonData, "source")
	if result.Exists() {
		valSource, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'source' is not of type string", errInvalidType)
		}
		dimo.Source, err = ToSource(valSource)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'source': %w", err)
		}
	}

	// convert subject to Subject
	result = gjson.GetBytes(jsonData, "subject")
	if result.Exists() {
		valSubject, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'subject' is not of type string", errInvalidType)
		}
		dimo.Subject, err = ToSubject(valSubject)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'subject': %w", err)
		}
	}

	// convert time to Timestamp
	result = gjson.GetBytes(jsonData, "time")
	if result.Exists() {
		valTimestamp, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'time' is not of type string", errInvalidType)
		}
		dimo.Timestamp, err = ToTimestamp(valTimestamp)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'time': %w", err)
		}
	}

	// convert type to Type
	result = gjson.GetBytes(jsonData, "type")
	if result.Exists() {
		valType, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'type' is not of type string", errInvalidType)
		}
		dimo.Type, err = ToType(valType)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'type': %w", err)
		}
	}

	// convert data.altitude to VehicleCurrentLocationAltitude
	result = gjson.GetBytes(jsonData, "data.altitude")
	if result.Exists() {
		valVehicleCurrentLocationAltitude, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.altitude' is not of type float64", errInvalidType)
		}
		dimo.VehicleCurrentLocationAltitude, err = ToVehicleCurrentLocationAltitude(valVehicleCurrentLocationAltitude)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.altitude': %w", err)
		}
	}

	// convert data.latitude to VehicleCurrentLocationLatitude
	result = gjson.GetBytes(jsonData, "data.latitude")
	if result.Exists() {
		valVehicleCurrentLocationLatitude, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.latitude' is not of type float64", errInvalidType)
		}
		dimo.VehicleCurrentLocationLatitude, err = ToVehicleCurrentLocationLatitude(valVehicleCurrentLocationLatitude)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.latitude': %w", err)
		}
	}

	// convert data.longitude to VehicleCurrentLocationLongitude
	result = gjson.GetBytes(jsonData, "data.longitude")
	if result.Exists() {
		valVehicleCurrentLocationLongitude, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.longitude' is not of type float64", errInvalidType)
		}
		dimo.VehicleCurrentLocationLongitude, err = ToVehicleCurrentLocationLongitude(valVehicleCurrentLocationLongitude)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.longitude': %w", err)
		}
	}

	// convert data.timestamp to VehicleCurrentLocationTimestamp
	result = gjson.GetBytes(jsonData, "data.timestamp")
	if result.Exists() {
		valVehicleCurrentLocationTimestamp, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.timestamp' is not of type string", errInvalidType)
		}
		dimo.VehicleCurrentLocationTimestamp, err = ToVehicleCurrentLocationTimestamp(valVehicleCurrentLocationTimestamp)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.timestamp': %w", err)
		}
	}

	// convert data.batteryVoltage to VehicleLowVoltageBatteryCurrentVoltage
	result = gjson.GetBytes(jsonData, "data.batteryVoltage")
	if result.Exists() {
		valVehicleLowVoltageBatteryCurrentVoltage, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.batteryVoltage' is not of type float64", errInvalidType)
		}
		dimo.VehicleLowVoltageBatteryCurrentVoltage, err = ToVehicleLowVoltageBatteryCurrentVoltage(valVehicleLowVoltageBatteryCurrentVoltage)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.batteryVoltage': %w", err)
		}
	}

	// convert data.speed to VehicleSpeed
	result = gjson.GetBytes(jsonData, "data.speed")
	if result.Exists() {
		valVehicleSpeed, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.speed' is not of type float64", errInvalidType)
		}
		dimo.VehicleSpeed, err = ToVehicleSpeed(valVehicleSpeed)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.speed': %w", err)
		}
	}

	// convert data.make to VehicleVehicleIdentificationBrand
	result = gjson.GetBytes(jsonData, "data.make")
	if result.Exists() {
		valVehicleVehicleIdentificationBrand, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.make' is not of type string", errInvalidType)
		}
		dimo.VehicleVehicleIdentificationBrand, err = ToVehicleVehicleIdentificationBrand(valVehicleVehicleIdentificationBrand)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.make': %w", err)
		}
	}

	// convert data.model to VehicleVehicleIdentificationModel
	result = gjson.GetBytes(jsonData, "data.model")
	if result.Exists() {
		valVehicleVehicleIdentificationModel, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.model' is not of type string", errInvalidType)
		}
		dimo.VehicleVehicleIdentificationModel, err = ToVehicleVehicleIdentificationModel(valVehicleVehicleIdentificationModel)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.model': %w", err)
		}
	}

	// convert data.vin to VehicleVehicleIdentificationVIN
	result = gjson.GetBytes(jsonData, "data.vin")
	if result.Exists() {
		valVehicleVehicleIdentificationVIN, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.vin' is not of type string", errInvalidType)
		}
		dimo.VehicleVehicleIdentificationVIN, err = ToVehicleVehicleIdentificationVIN(valVehicleVehicleIdentificationVIN)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.vin': %w", err)
		}
	}

	// convert data.year to VehicleVehicleIdentificationYear
	result = gjson.GetBytes(jsonData, "data.year")
	if result.Exists() {
		valVehicleVehicleIdentificationYear, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.year' is not of type float64", errInvalidType)
		}
		dimo.VehicleVehicleIdentificationYear, err = ToVehicleVehicleIdentificationYear(valVehicleVehicleIdentificationYear)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.year': %w", err)
		}
	}

	// convert data.vehicleID to VehicleID
	result = gjson.GetBytes(jsonData, "data.vehicleID")
	if result.Exists() {
		valVehicleID, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.vehicleID' is not of type string", errInvalidType)
		}
		dimo.VehicleID, err = ToVehicleID(valVehicleID)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.vehicleID': %w", err)
		}
	}
	return &dimo, nil
}
