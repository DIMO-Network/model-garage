// Code generated by "model-garage" DO NOT EDIT.
package vss

import (
	"errors"
	"fmt"

	"github.com/tidwall/gjson"
)

var (
	// errInvalidType is returned when a field is not of the expected type or not found.
	errInvalidType = errors.New("invalid type")
)

// IsInvalidType returns true if the error is of type errInvalidType.
func IsInvalidType(err error) bool {
	return errors.Is(err, errInvalidType)
}

// FromData creates a new Dimo from a map of data. Using defined conversion functions.
// If skipNotFound is true, the function will not return an error if a key is not found.
// instead the field will be set to the zero value of the type.
func FromData(jsonData []byte) (*Dimo, error) {

	dimo := Dimo{}

	var err error
	var result gjson.Result

	// convert data.definitionID to DefinitionID
	result = gjson.GetBytes(jsonData, "data.definitionID")
	if result.Exists() {
		valDefinitionID, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.definitionID' is not of type string", errInvalidType)
		}
		dimo.DefinitionID, err = ToDefinitionID(valDefinitionID)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.definitionID': %w", err)
		}
	}

	// convert source to Source
	result = gjson.GetBytes(jsonData, "source")
	if result.Exists() {
		valSource, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'source' is not of type string", errInvalidType)
		}
		dimo.Source, err = ToSource(valSource)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'source': %w", err)
		}
	}

	// convert subject to Subject
	result = gjson.GetBytes(jsonData, "subject")
	if result.Exists() {
		valSubject, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'subject' is not of type string", errInvalidType)
		}
		dimo.Subject, err = ToSubject(valSubject)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'subject': %w", err)
		}
	}

	// convert time to Timestamp
	result = gjson.GetBytes(jsonData, "time")
	if result.Exists() {
		valTimestamp, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'time' is not of type string", errInvalidType)
		}
		dimo.Timestamp, err = ToTimestamp(valTimestamp)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'time': %w", err)
		}
	}

	// convert type to Type
	result = gjson.GetBytes(jsonData, "type")
	if result.Exists() {
		valType, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'type' is not of type string", errInvalidType)
		}
		dimo.Type, err = ToType(valType)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'type': %w", err)
		}
	}

	// convert data.tires.frontLeft to VehicleChassisAxleRow1WheelLeftTirePressure
	result = gjson.GetBytes(jsonData, "data.tires.frontLeft")
	if result.Exists() {
		valVehicleChassisAxleRow1WheelLeftTirePressure, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.tires.frontLeft' is not of type float64", errInvalidType)
		}
		dimo.VehicleChassisAxleRow1WheelLeftTirePressure, err = ToVehicleChassisAxleRow1WheelLeftTirePressure(valVehicleChassisAxleRow1WheelLeftTirePressure)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.tires.frontLeft': %w", err)
		}
	}

	// convert data.tires.frontRight to VehicleChassisAxleRow1WheelRightTirePressure
	result = gjson.GetBytes(jsonData, "data.tires.frontRight")
	if result.Exists() {
		valVehicleChassisAxleRow1WheelRightTirePressure, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.tires.frontRight' is not of type float64", errInvalidType)
		}
		dimo.VehicleChassisAxleRow1WheelRightTirePressure, err = ToVehicleChassisAxleRow1WheelRightTirePressure(valVehicleChassisAxleRow1WheelRightTirePressure)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.tires.frontRight': %w", err)
		}
	}

	// convert data.tires.backLeft to VehicleChassisAxleRow2WheelLeftTirePressure
	result = gjson.GetBytes(jsonData, "data.tires.backLeft")
	if result.Exists() {
		valVehicleChassisAxleRow2WheelLeftTirePressure, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.tires.backLeft' is not of type float64", errInvalidType)
		}
		dimo.VehicleChassisAxleRow2WheelLeftTirePressure, err = ToVehicleChassisAxleRow2WheelLeftTirePressure(valVehicleChassisAxleRow2WheelLeftTirePressure)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.tires.backLeft': %w", err)
		}
	}

	// convert data.tires.backRight to VehicleChassisAxleRow2WheelRightTirePressure
	result = gjson.GetBytes(jsonData, "data.tires.backRight")
	if result.Exists() {
		valVehicleChassisAxleRow2WheelRightTirePressure, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.tires.backRight' is not of type float64", errInvalidType)
		}
		dimo.VehicleChassisAxleRow2WheelRightTirePressure, err = ToVehicleChassisAxleRow2WheelRightTirePressure(valVehicleChassisAxleRow2WheelRightTirePressure)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.tires.backRight': %w", err)
		}
	}

	// convert data.altitude to VehicleCurrentLocationAltitude
	result = gjson.GetBytes(jsonData, "data.altitude")
	if result.Exists() {
		valVehicleCurrentLocationAltitude, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.altitude' is not of type float64", errInvalidType)
		}
		dimo.VehicleCurrentLocationAltitude, err = ToVehicleCurrentLocationAltitude(valVehicleCurrentLocationAltitude)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.altitude': %w", err)
		}
	}

	// convert data.latitude to VehicleCurrentLocationLatitude
	result = gjson.GetBytes(jsonData, "data.latitude")
	if result.Exists() {
		valVehicleCurrentLocationLatitude, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.latitude' is not of type float64", errInvalidType)
		}
		dimo.VehicleCurrentLocationLatitude, err = ToVehicleCurrentLocationLatitude(valVehicleCurrentLocationLatitude)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.latitude': %w", err)
		}
	}

	// convert data.longitude to VehicleCurrentLocationLongitude
	result = gjson.GetBytes(jsonData, "data.longitude")
	if result.Exists() {
		valVehicleCurrentLocationLongitude, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.longitude' is not of type float64", errInvalidType)
		}
		dimo.VehicleCurrentLocationLongitude, err = ToVehicleCurrentLocationLongitude(valVehicleCurrentLocationLongitude)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.longitude': %w", err)
		}
	}

	// convert data.timestamp to VehicleCurrentLocationTimestamp
	result = gjson.GetBytes(jsonData, "data.timestamp")
	if result.Exists() {
		valVehicleCurrentLocationTimestamp, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.timestamp' is not of type string", errInvalidType)
		}
		dimo.VehicleCurrentLocationTimestamp, err = ToVehicleCurrentLocationTimestamp(valVehicleCurrentLocationTimestamp)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.timestamp': %w", err)
		}
	}

	// convert data.ambientTemp to VehicleExteriorAirTemperature
	result = gjson.GetBytes(jsonData, "data.ambientTemp")
	if result.Exists() {
		valVehicleExteriorAirTemperature, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.ambientTemp' is not of type float64", errInvalidType)
		}
		dimo.VehicleExteriorAirTemperature, err = ToVehicleExteriorAirTemperature(valVehicleExteriorAirTemperature)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.ambientTemp': %w", err)
		}
	}

	// convert data.batteryVoltage to VehicleLowVoltageBatteryCurrentVoltage
	result = gjson.GetBytes(jsonData, "data.batteryVoltage")
	if result.Exists() {
		valVehicleLowVoltageBatteryCurrentVoltage, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.batteryVoltage' is not of type float64", errInvalidType)
		}
		dimo.VehicleLowVoltageBatteryCurrentVoltage, err = ToVehicleLowVoltageBatteryCurrentVoltage(valVehicleLowVoltageBatteryCurrentVoltage)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.batteryVoltage': %w", err)
		}
	}

	// convert data.barometricPressure to VehicleOBDBarometricPressure
	result = gjson.GetBytes(jsonData, "data.barometricPressure")
	if result.Exists() {
		valVehicleOBDBarometricPressure, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.barometricPressure' is not of type float64", errInvalidType)
		}
		dimo.VehicleOBDBarometricPressure, err = ToVehicleOBDBarometricPressure(valVehicleOBDBarometricPressure)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.barometricPressure': %w", err)
		}
	}

	// convert data.engineLoad to VehicleOBDEngineLoad
	result = gjson.GetBytes(jsonData, "data.engineLoad")
	if result.Exists() {
		valVehicleOBDEngineLoad, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.engineLoad' is not of type float64", errInvalidType)
		}
		dimo.VehicleOBDEngineLoad, err = ToVehicleOBDEngineLoad(valVehicleOBDEngineLoad)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.engineLoad': %w", err)
		}
	}

	// convert data.intakeTemp to VehicleOBDIntakeTemp
	result = gjson.GetBytes(jsonData, "data.intakeTemp")
	if result.Exists() {
		valVehicleOBDIntakeTemp, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.intakeTemp' is not of type float64", errInvalidType)
		}
		dimo.VehicleOBDIntakeTemp, err = ToVehicleOBDIntakeTemp(valVehicleOBDIntakeTemp)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.intakeTemp': %w", err)
		}
	}

	// convert data.runTime to VehicleOBDRunTime
	result = gjson.GetBytes(jsonData, "data.runTime")
	if result.Exists() {
		valVehicleOBDRunTime, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.runTime' is not of type float64", errInvalidType)
		}
		dimo.VehicleOBDRunTime, err = ToVehicleOBDRunTime(valVehicleOBDRunTime)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.runTime': %w", err)
		}
	}

	// convert data.coolantTemp to VehiclePowertrainCombustionEngineECT
	result = gjson.GetBytes(jsonData, "data.coolantTemp")
	if result.Exists() {
		valVehiclePowertrainCombustionEngineECT, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.coolantTemp' is not of type float64", errInvalidType)
		}
		dimo.VehiclePowertrainCombustionEngineECT, err = ToVehiclePowertrainCombustionEngineECT(valVehiclePowertrainCombustionEngineECT)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.coolantTemp': %w", err)
		}
	}

	// convert data.oil to VehiclePowertrainCombustionEngineEngineOilLevel
	result = gjson.GetBytes(jsonData, "data.oil")
	if result.Exists() {
		valVehiclePowertrainCombustionEngineEngineOilLevel, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.oil' is not of type float64", errInvalidType)
		}
		dimo.VehiclePowertrainCombustionEngineEngineOilLevel, err = ToVehiclePowertrainCombustionEngineEngineOilLevel(valVehiclePowertrainCombustionEngineEngineOilLevel)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.oil': %w", err)
		}
	}

	// convert data.engineSpeed to VehiclePowertrainCombustionEngineSpeed
	result = gjson.GetBytes(jsonData, "data.engineSpeed")
	if result.Exists() {
		valVehiclePowertrainCombustionEngineSpeed, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.engineSpeed' is not of type float64", errInvalidType)
		}
		dimo.VehiclePowertrainCombustionEngineSpeed, err = ToVehiclePowertrainCombustionEngineSpeed(valVehiclePowertrainCombustionEngineSpeed)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.engineSpeed': %w", err)
		}
	}

	// convert data.throttlePosition to VehiclePowertrainCombustionEngineTPS
	result = gjson.GetBytes(jsonData, "data.throttlePosition")
	if result.Exists() {
		valVehiclePowertrainCombustionEngineTPS, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.throttlePosition' is not of type float64", errInvalidType)
		}
		dimo.VehiclePowertrainCombustionEngineTPS, err = ToVehiclePowertrainCombustionEngineTPS(valVehiclePowertrainCombustionEngineTPS)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.throttlePosition': %w", err)
		}
	}

	// convert data.fuelPercentRemaining to VehiclePowertrainFuelSystemAbsoluteLevel
	result = gjson.GetBytes(jsonData, "data.fuelPercentRemaining")
	if result.Exists() {
		valVehiclePowertrainFuelSystemAbsoluteLevel, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.fuelPercentRemaining' is not of type float64", errInvalidType)
		}
		dimo.VehiclePowertrainFuelSystemAbsoluteLevel, err = ToVehiclePowertrainFuelSystemAbsoluteLevel(valVehiclePowertrainFuelSystemAbsoluteLevel)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.fuelPercentRemaining': %w", err)
		}
	}

	// convert data.fuelType to VehiclePowertrainFuelSystemSupportedFuelTypes
	result = gjson.GetBytes(jsonData, "data.fuelType")
	if result.Exists() {
		valVehiclePowertrainFuelSystemSupportedFuelTypes, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.fuelType' is not of type string", errInvalidType)
		}
		dimo.VehiclePowertrainFuelSystemSupportedFuelTypes, err = ToVehiclePowertrainFuelSystemSupportedFuelTypes(valVehiclePowertrainFuelSystemSupportedFuelTypes)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.fuelType': %w", err)
		}
	}

	// convert data.range to VehiclePowertrainRange
	result = gjson.GetBytes(jsonData, "data.range")
	if result.Exists() {
		valVehiclePowertrainRange, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.range' is not of type float64", errInvalidType)
		}
		dimo.VehiclePowertrainRange, err = ToVehiclePowertrainRange(valVehiclePowertrainRange)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.range': %w", err)
		}
	}

	// convert data.chargeLimit to VehiclePowertrainTractionBatteryChargingChargeLimit
	result = gjson.GetBytes(jsonData, "data.chargeLimit")
	if result.Exists() {
		valVehiclePowertrainTractionBatteryChargingChargeLimit, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.chargeLimit' is not of type float64", errInvalidType)
		}
		dimo.VehiclePowertrainTractionBatteryChargingChargeLimit, err = ToVehiclePowertrainTractionBatteryChargingChargeLimit(valVehiclePowertrainTractionBatteryChargingChargeLimit)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.chargeLimit': %w", err)
		}
	}

	// convert data.charging to VehiclePowertrainTractionBatteryChargingIsCharging
	result = gjson.GetBytes(jsonData, "data.charging")
	if result.Exists() {
		valVehiclePowertrainTractionBatteryChargingIsCharging, ok := result.Value().(bool)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.charging' is not of type bool", errInvalidType)
		}
		dimo.VehiclePowertrainTractionBatteryChargingIsCharging, err = ToVehiclePowertrainTractionBatteryChargingIsCharging(valVehiclePowertrainTractionBatteryChargingIsCharging)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.charging': %w", err)
		}
	}

	// convert data.batteryCapacity to VehiclePowertrainTractionBatteryGrossCapacity
	result = gjson.GetBytes(jsonData, "data.batteryCapacity")
	if result.Exists() {
		valVehiclePowertrainTractionBatteryGrossCapacity, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.batteryCapacity' is not of type float64", errInvalidType)
		}
		dimo.VehiclePowertrainTractionBatteryGrossCapacity, err = ToVehiclePowertrainTractionBatteryGrossCapacity(valVehiclePowertrainTractionBatteryGrossCapacity)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.batteryCapacity': %w", err)
		}
	}

	// convert data.soc to VehiclePowertrainTractionBatteryStateOfChargeCurrent
	result = gjson.GetBytes(jsonData, "data.soc")
	if result.Exists() {
		valVehiclePowertrainTractionBatteryStateOfChargeCurrent, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.soc' is not of type float64", errInvalidType)
		}
		dimo.VehiclePowertrainTractionBatteryStateOfChargeCurrent, err = ToVehiclePowertrainTractionBatteryStateOfChargeCurrent(valVehiclePowertrainTractionBatteryStateOfChargeCurrent)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.soc': %w", err)
		}
	}

	// convert data.odometer to VehiclePowertrainTransmissionTravelledDistance
	result = gjson.GetBytes(jsonData, "data.odometer")
	if result.Exists() {
		valVehiclePowertrainTransmissionTravelledDistance, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.odometer' is not of type float64", errInvalidType)
		}
		dimo.VehiclePowertrainTransmissionTravelledDistance, err = ToVehiclePowertrainTransmissionTravelledDistance(valVehiclePowertrainTransmissionTravelledDistance)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.odometer': %w", err)
		}
	}

	// convert data.fuelType to VehiclePowertrainType
	result = gjson.GetBytes(jsonData, "data.fuelType")
	if result.Exists() {
		valVehiclePowertrainType, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.fuelType' is not of type string", errInvalidType)
		}
		dimo.VehiclePowertrainType, err = ToVehiclePowertrainType(valVehiclePowertrainType)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.fuelType': %w", err)
		}
	}

	// convert data.speed to VehicleSpeed
	result = gjson.GetBytes(jsonData, "data.speed")
	if result.Exists() {
		valVehicleSpeed, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.speed' is not of type float64", errInvalidType)
		}
		dimo.VehicleSpeed, err = ToVehicleSpeed(valVehicleSpeed)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.speed': %w", err)
		}
	}

	// convert data.make to VehicleVehicleIdentificationBrand
	result = gjson.GetBytes(jsonData, "data.make")
	if result.Exists() {
		valVehicleVehicleIdentificationBrand, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.make' is not of type string", errInvalidType)
		}
		dimo.VehicleVehicleIdentificationBrand, err = ToVehicleVehicleIdentificationBrand(valVehicleVehicleIdentificationBrand)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.make': %w", err)
		}
	}

	// convert data.model to VehicleVehicleIdentificationModel
	result = gjson.GetBytes(jsonData, "data.model")
	if result.Exists() {
		valVehicleVehicleIdentificationModel, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.model' is not of type string", errInvalidType)
		}
		dimo.VehicleVehicleIdentificationModel, err = ToVehicleVehicleIdentificationModel(valVehicleVehicleIdentificationModel)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.model': %w", err)
		}
	}

	// convert data.year to VehicleVehicleIdentificationYear
	result = gjson.GetBytes(jsonData, "data.year")
	if result.Exists() {
		valVehicleVehicleIdentificationYear, ok := result.Value().(float64)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.year' is not of type float64", errInvalidType)
		}
		dimo.VehicleVehicleIdentificationYear, err = ToVehicleVehicleIdentificationYear(valVehicleVehicleIdentificationYear)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.year': %w", err)
		}
	}

	// convert data.vehicleID to VehicleID
	result = gjson.GetBytes(jsonData, "data.vehicleID")
	if result.Exists() {
		valVehicleID, ok := result.Value().(string)
		if !ok {
			return nil, fmt.Errorf("%w, field 'data.vehicleID' is not of type string", errInvalidType)
		}
		dimo.VehicleID, err = ToVehicleID(valVehicleID)
		if err != nil {
			return nil, fmt.Errorf("failed to convert 'data.vehicleID': %w", err)
		}
	}
	return &dimo, nil
}
