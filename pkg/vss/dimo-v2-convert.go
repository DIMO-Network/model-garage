// Code generated by "model-garage" DO NOT EDIT.
package vss

import (
	"errors"
	"fmt"
	"time"

	"github.com/tidwall/gjson"
)

// errInvalidType is returned when a field is not of the expected type or not found.
var errInvalidType = errors.New("invalid type")

// IsInvalidType returns true if the error is of type errInvalidType.
func IsInvalidType(err error) bool {
	return errors.Is(err, errInvalidType)
}

// SignalsFromData converts the given JSON data to a slice of signals.
func SignalsFromV2Data(tokenID uint32, timestamp time.Time, signalName string, sigResult gjson.Result) ([]Signal, error) {
	valResult := sigResult.Get("value")
	if !valResult.Exists() {
		return nil, errors.New("value field not found")
	}
	ret := make([]Signal, 0)
	var retErrs error
	switch signalName {
	case "data.altitude":
		val0, err := VehicleCurrentLocationAltitudeFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.altitude': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_CurrentLocation_Altitude",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.ambientTemp":
		val0, err := VehicleExteriorAirTemperatureFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.ambientTemp': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_Exterior_AirTemperature",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.barometricPressure":
		val0, err := VehicleOBDBarometricPressureFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.barometricPressure': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_OBD_BarometricPressure",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.batteryCapacity":
		val0, err := VehiclePowertrainTractionBatteryGrossCapacityFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.batteryCapacity': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_Powertrain_TractionBattery_GrossCapacity",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.batteryVoltage":
		val0, err := VehicleLowVoltageBatteryCurrentVoltageFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.batteryVoltage': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_LowVoltageBattery_CurrentVoltage",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.chargeLimit":
		val0, err := VehiclePowertrainTractionBatteryChargingChargeLimitFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.chargeLimit': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_Powertrain_TractionBattery_Charging_ChargeLimit",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.charging":
		val0, err := VehiclePowertrainTractionBatteryChargingIsChargingFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.charging': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_Powertrain_TractionBattery_Charging_IsCharging",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.coolantTemp":
		val0, err := VehiclePowertrainCombustionEngineECTFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.coolantTemp': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_Powertrain_CombustionEngine_ECT",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.engineLoad":
		val0, err := VehicleOBDEngineLoadFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.engineLoad': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_OBD_EngineLoad",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.engineSpeed":
		val0, err := VehiclePowertrainCombustionEngineSpeedFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.engineSpeed': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_Powertrain_CombustionEngine_Speed",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.fuelPercentRemaining":
		val0, err := VehiclePowertrainFuelSystemAbsoluteLevelFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.fuelPercentRemaining': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_Powertrain_FuelSystem_AbsoluteLevel",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.fuelType":
		val0, err := VehiclePowertrainFuelSystemSupportedFuelTypesFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.fuelType': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_Powertrain_FuelSystem_SupportedFuelTypes",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
		val1, err := VehiclePowertrainTypeFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.fuelType': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_Powertrain_Type",
			}
			sig.SetValue(val1)
			ret = append(ret, sig)
		}
	case "data.intakeTemp":
		val0, err := VehicleOBDIntakeTempFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.intakeTemp': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_OBD_IntakeTemp",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.latitude":
		val0, err := VehicleCurrentLocationLatitudeFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.latitude': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_CurrentLocation_Latitude",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.longitude":
		val0, err := VehicleCurrentLocationLongitudeFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.longitude': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_CurrentLocation_Longitude",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.make":
		val0, err := VehicleVehicleIdentificationBrandFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.make': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_VehicleIdentification_Brand",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.model":
		val0, err := VehicleVehicleIdentificationModelFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.model': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_VehicleIdentification_Model",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.odometer":
		val0, err := VehiclePowertrainTransmissionTravelledDistanceFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.odometer': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_Powertrain_Transmission_TravelledDistance",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.oil":
		val0, err := VehiclePowertrainCombustionEngineEngineOilLevelFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.oil': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_Powertrain_CombustionEngine_EngineOilLevel",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.range":
		val0, err := VehiclePowertrainRangeFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.range': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_Powertrain_Range",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.runTime":
		val0, err := VehicleOBDRunTimeFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.runTime': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_OBD_RunTime",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.soc":
		val0, err := VehiclePowertrainTractionBatteryStateOfChargeCurrentFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.soc': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_Powertrain_TractionBattery_StateOfCharge_Current",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.speed":
		val0, err := VehicleSpeedFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.speed': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_Speed",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.throttlePosition":
		val0, err := VehiclePowertrainCombustionEngineTPSFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.throttlePosition': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_Powertrain_CombustionEngine_TPS",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.timestamp":
		val0, err := VehicleCurrentLocationTimestampFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.timestamp': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_CurrentLocation_Timestamp",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
		val1, err := VehicleCurrentLocationTimestampFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.timestamp': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_CurrentLocation_Timestamp",
			}
			sig.SetValue(val1)
			ret = append(ret, sig)
		}
	case "data.tires.backLeft":
		val0, err := VehicleChassisAxleRow2WheelLeftTirePressureFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.tires.backLeft': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_Chassis_Axle_Row2_Wheel_Left_Tire_Pressure",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.tires.backRight":
		val0, err := VehicleChassisAxleRow2WheelRightTirePressureFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.tires.backRight': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_Chassis_Axle_Row2_Wheel_Right_Tire_Pressure",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.tires.frontLeft":
		val0, err := VehicleChassisAxleRow1WheelLeftTirePressureFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.tires.frontLeft': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_Chassis_Axle_Row1_Wheel_Left_Tire_Pressure",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.tires.frontRight":
		val0, err := VehicleChassisAxleRow1WheelRightTirePressureFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.tires.frontRight': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_Chassis_Axle_Row1_Wheel_Right_Tire_Pressure",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	case "data.year":
		val0, err := VehicleVehicleIdentificationYearFromV2Data(valResult)
		if err != nil {
			retErrs = errors.Join(retErrs, fmt.Errorf("failed to convert 'data.year': %w", err))
		} else {
			sig := Signal{
				TokenID:   tokenID,
				Timestamp: timestamp,
				Name:      "Vehicle_VehicleIdentification_Year",
			}
			sig.SetValue(val0)
			ret = append(ret, sig)
		}
	default:
		return nil, errors.New("unknown signal name")
	}
	return ret, retErrs
}

// VehicleChassisAxleRow1WheelLeftTirePressureFromData converts the given JSON data to a float64.
func VehicleChassisAxleRow1WheelLeftTirePressureFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehicleChassisAxleRow1WheelLeftTirePressure0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.tires.frontLeft': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.tires.frontLeft' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehicleChassisAxleRow1WheelRightTirePressureFromData converts the given JSON data to a float64.
func VehicleChassisAxleRow1WheelRightTirePressureFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehicleChassisAxleRow1WheelRightTirePressure0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.tires.frontRight': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.tires.frontRight' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehicleChassisAxleRow2WheelLeftTirePressureFromData converts the given JSON data to a float64.
func VehicleChassisAxleRow2WheelLeftTirePressureFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehicleChassisAxleRow2WheelLeftTirePressure0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.tires.backLeft': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.tires.backLeft' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehicleChassisAxleRow2WheelRightTirePressureFromData converts the given JSON data to a float64.
func VehicleChassisAxleRow2WheelRightTirePressureFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehicleChassisAxleRow2WheelRightTirePressure0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.tires.backRight': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.tires.backRight' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehicleCurrentLocationAltitudeFromData converts the given JSON data to a float64.
func VehicleCurrentLocationAltitudeFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehicleCurrentLocationAltitude0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.altitude': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.altitude' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehicleCurrentLocationLatitudeFromData converts the given JSON data to a float64.
func VehicleCurrentLocationLatitudeFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehicleCurrentLocationLatitude0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.latitude': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.latitude' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehicleCurrentLocationLongitudeFromData converts the given JSON data to a float64.
func VehicleCurrentLocationLongitudeFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehicleCurrentLocationLongitude0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.longitude': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.longitude' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehicleCurrentLocationTimestampFromData converts the given JSON data to a float64.
func VehicleCurrentLocationTimestampFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(string)
	if ok {
		ret, err = ToVehicleCurrentLocationTimestamp0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.timestamp': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.timestamp' is not of type 'string' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}
	val1, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehicleCurrentLocationTimestamp1(val1)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.timestamp': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.timestamp' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehicleExteriorAirTemperatureFromData converts the given JSON data to a float64.
func VehicleExteriorAirTemperatureFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehicleExteriorAirTemperature0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.ambientTemp': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.ambientTemp' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehicleLowVoltageBatteryCurrentVoltageFromData converts the given JSON data to a float64.
func VehicleLowVoltageBatteryCurrentVoltageFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehicleLowVoltageBatteryCurrentVoltage0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.batteryVoltage': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.batteryVoltage' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehicleOBDBarometricPressureFromData converts the given JSON data to a float64.
func VehicleOBDBarometricPressureFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehicleOBDBarometricPressure0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.barometricPressure': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.barometricPressure' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehicleOBDEngineLoadFromData converts the given JSON data to a float64.
func VehicleOBDEngineLoadFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehicleOBDEngineLoad0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.engineLoad': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.engineLoad' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehicleOBDIntakeTempFromData converts the given JSON data to a float64.
func VehicleOBDIntakeTempFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehicleOBDIntakeTemp0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.intakeTemp': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.intakeTemp' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehicleOBDRunTimeFromData converts the given JSON data to a float64.
func VehicleOBDRunTimeFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehicleOBDRunTime0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.runTime': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.runTime' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehiclePowertrainCombustionEngineECTFromData converts the given JSON data to a float64.
func VehiclePowertrainCombustionEngineECTFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehiclePowertrainCombustionEngineECT0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.coolantTemp': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.coolantTemp' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehiclePowertrainCombustionEngineEngineOilLevelFromData converts the given JSON data to a string.
func VehiclePowertrainCombustionEngineEngineOilLevelFromV2Data(result gjson.Result) (ret string, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehiclePowertrainCombustionEngineEngineOilLevel0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.oil': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.oil' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehiclePowertrainCombustionEngineSpeedFromData converts the given JSON data to a float64.
func VehiclePowertrainCombustionEngineSpeedFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehiclePowertrainCombustionEngineSpeed0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.engineSpeed': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.engineSpeed' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehiclePowertrainCombustionEngineTPSFromData converts the given JSON data to a float64.
func VehiclePowertrainCombustionEngineTPSFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehiclePowertrainCombustionEngineTPS0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.throttlePosition': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.throttlePosition' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehiclePowertrainFuelSystemAbsoluteLevelFromData converts the given JSON data to a float64.
func VehiclePowertrainFuelSystemAbsoluteLevelFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehiclePowertrainFuelSystemAbsoluteLevel0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.fuelPercentRemaining': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.fuelPercentRemaining' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehiclePowertrainFuelSystemSupportedFuelTypesFromData converts the given JSON data to a string.
func VehiclePowertrainFuelSystemSupportedFuelTypesFromV2Data(result gjson.Result) (ret string, err error) {
	var errs error
	val0, ok := result.Value().(string)
	if ok {
		ret, err = ToVehiclePowertrainFuelSystemSupportedFuelTypes0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.fuelType': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.fuelType' is not of type 'string' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehiclePowertrainRangeFromData converts the given JSON data to a float64.
func VehiclePowertrainRangeFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehiclePowertrainRange0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.range': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.range' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehiclePowertrainTractionBatteryChargingChargeLimitFromData converts the given JSON data to a float64.
func VehiclePowertrainTractionBatteryChargingChargeLimitFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehiclePowertrainTractionBatteryChargingChargeLimit0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.chargeLimit': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.chargeLimit' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehiclePowertrainTractionBatteryChargingIsChargingFromData converts the given JSON data to a float64.
func VehiclePowertrainTractionBatteryChargingIsChargingFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(bool)
	if ok {
		ret, err = ToVehiclePowertrainTractionBatteryChargingIsCharging0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.charging': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.charging' is not of type 'bool' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehiclePowertrainTractionBatteryGrossCapacityFromData converts the given JSON data to a float64.
func VehiclePowertrainTractionBatteryGrossCapacityFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehiclePowertrainTractionBatteryGrossCapacity0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.batteryCapacity': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.batteryCapacity' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehiclePowertrainTractionBatteryStateOfChargeCurrentFromData converts the given JSON data to a float64.
func VehiclePowertrainTractionBatteryStateOfChargeCurrentFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehiclePowertrainTractionBatteryStateOfChargeCurrent0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.soc': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.soc' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehiclePowertrainTransmissionTravelledDistanceFromData converts the given JSON data to a float64.
func VehiclePowertrainTransmissionTravelledDistanceFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehiclePowertrainTransmissionTravelledDistance0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.odometer': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.odometer' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehiclePowertrainTypeFromData converts the given JSON data to a string.
func VehiclePowertrainTypeFromV2Data(result gjson.Result) (ret string, err error) {
	var errs error
	val0, ok := result.Value().(string)
	if ok {
		ret, err = ToVehiclePowertrainType0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.fuelType': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.fuelType' is not of type 'string' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehicleSpeedFromData converts the given JSON data to a float64.
func VehicleSpeedFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehicleSpeed0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.speed': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.speed' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehicleVehicleIdentificationBrandFromData converts the given JSON data to a string.
func VehicleVehicleIdentificationBrandFromV2Data(result gjson.Result) (ret string, err error) {
	var errs error
	val0, ok := result.Value().(string)
	if ok {
		ret, err = ToVehicleVehicleIdentificationBrand0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.make': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.make' is not of type 'string' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehicleVehicleIdentificationModelFromData converts the given JSON data to a string.
func VehicleVehicleIdentificationModelFromV2Data(result gjson.Result) (ret string, err error) {
	var errs error
	val0, ok := result.Value().(string)
	if ok {
		ret, err = ToVehicleVehicleIdentificationModel0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.model': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.model' is not of type 'string' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}

// VehicleVehicleIdentificationYearFromData converts the given JSON data to a float64.
func VehicleVehicleIdentificationYearFromV2Data(result gjson.Result) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(float64)
	if ok {
		ret, err = ToVehicleVehicleIdentificationYear0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.year': %w", err))
	} else {
		errs = errors.Join(errs, fmt.Errorf("%w, field 'data.year' is not of type 'float64' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
	}

	return ret, errs
}
