package vss_test

import (
	"fmt"
	"math"
	"testing"
	"time"

	"github.com/KevinJoiner/model-garage/pkg/vss"
	"github.com/stretchr/testify/require"
)

// This file is automatically populated with conversion functions for each field of a vehicle struct.
// any conversion functions already defined in this package will not be generated.
// Code generated by model-garage.

const (
	passThroughString  = "DIMO"
	passThroughFloat64 = 123.456
)

func TestToChassisAxleRow1WheelLeftTirePressure(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         float64
		expected      uint16
		expectedError bool
	}{
		{
			name:          "Valid value",
			input:         32,
			expected:      32,
			expectedError: false,
		},
		{
			name:          "Zero value",
			input:         0,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Negative value",
			input:         -15.75,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Large value",
			input:         math.MaxFloat64,
			expected:      math.MaxUint16,
			expectedError: false,
		},
		{
			name:          "Decimal above 0.5",
			input:         32.9,
			expected:      32,
			expectedError: false,
		},
		{
			name:          "Decimal below 0.5",
			input:         32.1,
			expected:      32,
			expectedError: false,
		},
	}
	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToChassisAxleRow1WheelLeftTirePressure(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.Equal(t, test.expected, result, "Unexpected result")
			}
		})
	}
}

func TestToChassisAxleRow1WheelRightTirePressure(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         float64
		expected      uint16
		expectedError bool
	}{
		{
			name:          "Valid value",
			input:         32,
			expected:      32,
			expectedError: false,
		},
		{
			name:          "Zero value",
			input:         0,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Negative value",
			input:         -15.75,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Large value",
			input:         math.MaxFloat64,
			expected:      math.MaxUint16,
			expectedError: false,
		},
		{
			name:          "Decimal above 0.5",
			input:         32.9,
			expected:      32,
			expectedError: false,
		},
		{
			name:          "Decimal below 0.5",
			input:         32.1,
			expected:      32,
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToChassisAxleRow1WheelRightTirePressure(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.Equal(t, test.expected, result, "Unexpected result")
			}
		})
	}
}

func TestToChassisAxleRow2WheelLeftTirePressure(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         float64
		expected      uint16
		expectedError bool
	}{
		{
			name:          "Valid value",
			input:         32,
			expected:      32,
			expectedError: false,
		},
		{
			name:          "Zero value",
			input:         0,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Negative value",
			input:         -15.75,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Large value",
			input:         math.MaxFloat64,
			expected:      math.MaxUint16,
			expectedError: false,
		},
		{
			name:          "Decimal above 0.5",
			input:         32.9,
			expected:      32,
			expectedError: false,
		},
		{
			name:          "Decimal below 0.5",
			input:         32.1,
			expected:      32,
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToChassisAxleRow2WheelLeftTirePressure(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.Equal(t, test.expected, result, "Unexpected result")
			}
		})
	}
}

func TestToChassisAxleRow2WheelRightTirePressure(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         float64
		expected      uint16
		expectedError bool
	}{
		{
			name:          "Valid value",
			input:         32,
			expected:      32,
			expectedError: false,
		},
		{
			name:          "Zero value",
			input:         0,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Negative value",
			input:         -15.75,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Large value",
			input:         math.MaxFloat64,
			expected:      math.MaxUint16,
			expectedError: false,
		},
		{
			name:          "Decimal above 0.5",
			input:         32.9,
			expected:      32,
			expectedError: false,
		},
		{
			name:          "Decimal below 0.5",
			input:         32.1,
			expected:      32,
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToChassisAxleRow2WheelRightTirePressure(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.Equal(t, test.expected, result, "Unexpected result")
			}
		})
	}
}

func TestToCurrentLocationAltitude(t *testing.T) {
	t.Parallel()
	result, err := vss.ToCurrentLocationAltitude(passThroughFloat64)
	require.NoError(t, err, "Unexpected error")
	require.Equal(t, passThroughFloat64, result, "Unexpected result")
}

func TestToCurrentLocationLatitude(t *testing.T) {
	t.Parallel()
	result, err := vss.ToCurrentLocationLatitude(passThroughFloat64)
	require.NoError(t, err, "Unexpected error")
	require.Equal(t, passThroughFloat64, result, "Unexpected result")
}

func TestToCurrentLocationLongitude(t *testing.T) {
	t.Parallel()
	result, err := vss.ToCurrentLocationLongitude(passThroughFloat64)
	require.NoError(t, err, "Unexpected error")
	require.Equal(t, passThroughFloat64, result, "Unexpected result")
}

func TestToCurrentLocationTimestamp(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         string
		expected      time.Time
		expectedError bool
	}{
		{
			name:          "Valid RFC3339 timestamp",
			input:         "2022-01-15T10:30:00Z",
			expected:      time.Date(2022, 1, 15, 10, 30, 0, 0, time.UTC),
			expectedError: false,
		},
		{
			name:          "Timestamp with timezone",
			input:         "2024-02-24T12:00:00-08:00",
			expected:      time.Date(2024, 2, 24, 12, 0, 0, 0, time.FixedZone("", -8*60*60)),
			expectedError: false,
		},
		{
			name:          "Invalid timestamp format",
			input:         "2021/12/25 08:00:00",
			expected:      time.Time{},
			expectedError: true,
		},
		{
			name:          "Empty string",
			input:         "",
			expected:      time.Time{},
			expectedError: true,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToCurrentLocationTimestamp(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.Equal(t, test.expected, result, "Unexpected result")
			}
		})
	}
}

func TestToDIMODefinitionID(t *testing.T) {
	t.Parallel()
	result, err := vss.ToDIMODefinitionID(passThroughString)
	require.NoError(t, err, "Unexpected error")
	require.Equal(t, passThroughString, result, "Unexpected result")
}

func TestToDIMOSource(t *testing.T) {
	t.Parallel()
	result, err := vss.ToDIMOSource(passThroughString)
	require.NoError(t, err, "Unexpected error")
	require.Equal(t, passThroughString, result, "Unexpected result")
}

func TestToDIMOSubject(t *testing.T) {
	t.Parallel()
	result, err := vss.ToDIMOSubject(passThroughString)
	require.NoError(t, err, "Unexpected error")
	require.Equal(t, passThroughString, result, "Unexpected result")
}

func TestToDIMOTimestamp(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         string
		expected      time.Time
		expectedError bool
	}{
		{
			name:          "Valid RFC3339 timestamp",
			input:         "2022-01-15T10:30:00Z",
			expected:      time.Date(2022, 1, 15, 10, 30, 0, 0, time.UTC),
			expectedError: false,
		},
		{
			name:          "Timestamp with timezone",
			input:         "2024-02-24T12:00:00-08:00",
			expected:      time.Date(2024, 2, 24, 12, 0, 0, 0, time.FixedZone("", -8*60*60)),
			expectedError: false,
		},
		{
			name:          "Invalid timestamp format",
			input:         "2021/12/25 08:00:00",
			expected:      time.Time{},
			expectedError: true,
		},
		{
			name:          "Empty string",
			input:         "",
			expected:      time.Time{},
			expectedError: true,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToDIMOTimestamp(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.Equal(t, test.expected, result, "Unexpected result")
			}
		})
	}
}

func TestToDIMOType(t *testing.T) {
	t.Parallel()
	result, err := vss.ToDIMOType(passThroughString)
	require.NoError(t, err, "Unexpected error")
	require.Equal(t, passThroughString, result, "Unexpected result")
}

func TestToDIMOVehicleID(t *testing.T) {
	t.Parallel()
	result, err := vss.ToDIMOVehicleID(passThroughString)
	require.NoError(t, err, "Unexpected error")
	require.Equal(t, passThroughString, result, "Unexpected result")
}

func TestToExteriorAirTemperature(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         float64
		expected      float32
		expectedError bool
	}{
		{
			name:          "Positive Value",
			input:         25.5,
			expected:      25.5,
			expectedError: false,
		},
		{
			name:          "Negative Value",
			input:         -10.8,
			expected:      -10.8,
			expectedError: false,
		},
		{
			name:          "Value too high",
			input:         math.MaxFloat64,
			expected:      math.MaxFloat32,
			expectedError: false,
		},
		{
			name:          "Value too low",
			input:         math.SmallestNonzeroFloat64,
			expected:      math.SmallestNonzeroFloat32,
			expectedError: false,
		},
		{
			name:          "Zero Value",
			input:         0.0,
			expected:      0.0,
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToExteriorAirTemperature(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.InDeltaf(t, test.expected, result, 1e45, "Unexpected result got %f expected %f", result, test.expected)
			}
		})
	}
}

func TestToLowVoltageBatteryCurrentVoltage(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         float64
		expected      float32
		expectedError bool
	}{
		{
			name:          "Positive Value",
			input:         25.5,
			expected:      25.5,
			expectedError: false,
		},
		{
			name:          "Negative Value",
			input:         -10.8,
			expected:      -10.8,
			expectedError: false,
		},
		{
			name:          "Value too high",
			input:         math.MaxFloat64,
			expected:      math.MaxFloat32,
			expectedError: false,
		},
		{
			name:          "Value too low",
			input:         math.SmallestNonzeroFloat64,
			expected:      math.SmallestNonzeroFloat32,
			expectedError: false,
		},
		{
			name:          "Zero Value",
			input:         0.0,
			expected:      0.0,
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToLowVoltageBatteryCurrentVoltage(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.InDeltaf(t, test.expected, result, 1e45, "Unexpected result got %f expected %f", result, test.expected)
			}
		})
	}
}

func TestToOBDBarometricPressure(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         float64
		expected      float32
		expectedError bool
	}{
		{
			name:          "Positive Value",
			input:         25.5,
			expected:      25.5,
			expectedError: false,
		},
		{
			name:          "Negative Value",
			input:         -10.8,
			expected:      -10.8,
			expectedError: false,
		},
		{
			name:          "Value too high",
			input:         math.MaxFloat64,
			expected:      math.MaxFloat32,
			expectedError: false,
		},
		{
			name:          "Value too low",
			input:         math.SmallestNonzeroFloat64,
			expected:      math.SmallestNonzeroFloat32,
			expectedError: false,
		},
		{
			name:          "Zero Value",
			input:         0.0,
			expected:      0.0,
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToOBDBarometricPressure(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.InDeltaf(t, test.expected, result, 1e45, "Unexpected result got %f expected %f", result, test.expected)
			}
		})
	}
}

func TestToOBDEngineLoad(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         float64
		expected      float32
		expectedError bool
	}{
		{
			name:          "Positive Value",
			input:         25.5,
			expected:      25.5,
			expectedError: false,
		},
		{
			name:          "Negative Value",
			input:         -10.8,
			expected:      -10.8,
			expectedError: false,
		},
		{
			name:          "Value too high",
			input:         math.MaxFloat64,
			expected:      math.MaxFloat32,
			expectedError: false,
		},
		{
			name:          "Value too low",
			input:         math.SmallestNonzeroFloat64,
			expected:      math.SmallestNonzeroFloat32,
			expectedError: false,
		},
		{
			name:          "Zero Value",
			input:         0.0,
			expected:      0.0,
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToOBDEngineLoad(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.InDeltaf(t, test.expected, result, 1e45, "Unexpected result got %f expected %f", result, test.expected)
			}
		})
	}
}

func TestToOBDIntakeTemp(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         float64
		expected      float32
		expectedError bool
	}{
		{
			name:          "Positive Value",
			input:         25.5,
			expected:      25.5,
			expectedError: false,
		},
		{
			name:          "Negative Value",
			input:         -10.8,
			expected:      -10.8,
			expectedError: false,
		},
		{
			name:          "Value too high",
			input:         math.MaxFloat64,
			expected:      math.MaxFloat32,
			expectedError: false,
		},
		{
			name:          "Value too low",
			input:         math.SmallestNonzeroFloat64,
			expected:      math.SmallestNonzeroFloat32,
			expectedError: false,
		},
		{
			name:          "Zero Value",
			input:         0.0,
			expected:      0.0,
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToOBDIntakeTemp(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.InDeltaf(t, test.expected, result, 1e45, "Unexpected result got %f expected %f", result, test.expected)
			}
		})
	}
}

func TestToOBDRunTime(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         float64
		expected      float32
		expectedError bool
	}{
		{
			name:          "Positive Value",
			input:         25.5,
			expected:      25.5,
			expectedError: false,
		},
		{
			name:          "Negative Value",
			input:         -10.8,
			expected:      -10.8,
			expectedError: false,
		},
		{
			name:          "Value too high",
			input:         math.MaxFloat64,
			expected:      math.MaxFloat32,
			expectedError: false,
		},
		{
			name:          "Value too low",
			input:         math.SmallestNonzeroFloat64,
			expected:      math.SmallestNonzeroFloat32,
			expectedError: false,
		},
		{
			name:          "Zero Value",
			input:         0.0,
			expected:      0.0,
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToOBDRunTime(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.InDeltaf(t, test.expected, result, 1e45, "Unexpected result got %f expected %f", result, test.expected)
			}
		})
	}
}

func TestToPowertrainCombustionEngineECT(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         float64
		expected      int16
		expectedError bool
	}{
		{
			name:          "Positive Value",
			input:         90.5,
			expected:      90,
			expectedError: false,
		},
		{
			name:          "Negative Value",
			input:         -10.8,
			expected:      -10,
			expectedError: false,
		},
		{
			name:          "Value too high",
			input:         math.MaxFloat64,
			expected:      math.MaxInt16,
			expectedError: false,
		},
		{
			name:          "Value too low",
			input:         math.SmallestNonzeroFloat64,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Zero Value",
			input:         0.0,
			expected:      0,
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToPowertrainCombustionEngineECT(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.InDeltaf(t, test.expected, result, 1e45, "Unexpected result got %f expected %f", result, test.expected)
			}
		})
	}
}

func TestToPowertrainCombustionEngineEngineOilLevel(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         float64
		expected      string
		expectedError bool
	}{
		{
			name:          "Critically Low",
			input:         0.2,
			expected:      "CRITICALLY_LOW",
			expectedError: false,
		},
		{
			name:          "Low",
			input:         0.4,
			expected:      "LOW",
			expectedError: false,
		},
		{
			name:          "Normal",
			input:         0.6,
			expected:      "NORMAL",
			expectedError: false,
		},
		{
			name:          "High",
			input:         0.9,
			expected:      "HIGH",
			expectedError: false,
		},
		{
			name:          "Critically High",
			input:         1.0,
			expected:      "CRITICALLY_HIGH",
			expectedError: false,
		},
		{
			name:          "Above 1.0",
			input:         1.1,
			expected:      "CRITICALLY_HIGH",
			expectedError: false,
		},
		{
			name:          "Negative Value",
			input:         -0.1,
			expected:      "CRITICALLY_LOW",
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToPowertrainCombustionEngineEngineOilLevel(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.Equal(t, test.expected, result, "Unexpected result")
			}
		})
	}
}

func TestToPowertrainCombustionEngineSpeed(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         float64
		expected      uint16
		expectedError bool
	}{
		{
			name:          "Valid Value",
			input:         65,
			expected:      65,
			expectedError: false,
		},
		{
			name:          "Zero Value",
			input:         0.0,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Negative Value",
			input:         -10.8,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Max Float64 Value",
			input:         math.MaxFloat64,
			expected:      math.MaxUint16,
			expectedError: false,
		},
		{
			name:          "Min Float64 Value",
			input:         math.SmallestNonzeroFloat64,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Decimal above 0.5 no rounding",
			input:         65.9,
			expected:      65,
			expectedError: false,
		},
		{
			name:          "Decimal below 0.5 no rounding",
			input:         65.1,
			expected:      65,
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToPowertrainCombustionEngineSpeed(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.Equal(t, test.expected, result, "Unexpected result")
			}
		})
	}
}

func TestToPowertrainCombustionEngineTPS(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         float64
		expected      uint8
		expectedError bool
	}{
		{
			name:          "Valid Value",
			input:         65,
			expected:      65,
			expectedError: false,
		},
		{
			name:          "Zero Value",
			input:         0.0,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Negative Value",
			input:         -10.8,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Max Float64 Value",
			input:         math.MaxFloat64,
			expected:      math.MaxUint8,
			expectedError: false,
		},
		{
			name:          "Min Float64 Value",
			input:         math.SmallestNonzeroFloat64,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Decimal above 0.5 no rounding",
			input:         65.9,
			expected:      65,
			expectedError: false,
		},
		{
			name:          "Decimal below 0.5 no rounding",
			input:         65.1,
			expected:      65,
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToPowertrainCombustionEngineTPS(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.Equal(t, test.expected, result, "Unexpected result")
			}
		})
	}
}

func TestToPowertrainFuelSystemAbsoluteLevel(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         float64
		expected      float32
		expectedError bool
	}{
		{
			name:          "Positive Value",
			input:         25.5,
			expected:      25.5,
			expectedError: false,
		},
		{
			name:          "Negative Value",
			input:         -10.8,
			expected:      -10.8,
			expectedError: false,
		},
		{
			name:          "Value too high",
			input:         math.MaxFloat64,
			expected:      math.MaxFloat32,
			expectedError: false,
		},
		{
			name:          "Value too low",
			input:         math.SmallestNonzeroFloat64,
			expected:      math.SmallestNonzeroFloat32,
			expectedError: false,
		},
		{
			name:          "Zero Value",
			input:         0.0,
			expected:      0.0,
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToPowertrainFuelSystemAbsoluteLevel(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.InDeltaf(t, test.expected, result, 1e45, "Unexpected result got %f expected %f", result, test.expected)
			}
		})
	}
}

func TestToPowertrainFuelSystemSupportedFuelTypes(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         string
		expected      []string
		expectedError bool
	}{
		{
			name:          "Gasoline",
			input:         "Gasoline",
			expected:      []string{"GASOLINE"},
			expectedError: false,
		},
		{
			name:          "Ethanol",
			input:         "Ethanol",
			expected:      []string{"E85"},
			expectedError: false,
		},
		{
			name:          "Diesel",
			input:         "Diesel",
			expected:      []string{"DIESEL"},
			expectedError: false,
		},
		{
			name:          "LPG",
			input:         "LPG",
			expected:      []string{"LPG"},
			expectedError: false,
		},
		{
			name:          "Unknown Fuel Type",
			input:         "UnknownFuelType",
			expected:      []string{"OTHER"},
			expectedError: false,
		},
		{
			name:          "Electric",
			input:         "Electric",
			expected:      []string{"OTHER"},
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToPowertrainFuelSystemSupportedFuelTypes(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.Equal(t, test.expected, result, "Unexpected result")
			}
		})
	}
}

func TestToPowertrainRange(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         float64
		expected      uint32
		expectedError bool
	}{
		{
			name:          "Valid Value",
			input:         65,
			expected:      65,
			expectedError: false,
		},
		{
			name:          "Zero Value",
			input:         0.0,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Negative Value",
			input:         -10.8,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Max Float64 Value",
			input:         math.MaxFloat64,
			expected:      math.MaxUint32,
			expectedError: false,
		},
		{
			name:          "Min Float64 Value",
			input:         math.SmallestNonzeroFloat64,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Decimal above 0.5 no rounding",
			input:         65.9,
			expected:      65,
			expectedError: false,
		},
		{
			name:          "Decimal below 0.5 no rounding",
			input:         65.1,
			expected:      65,
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToPowertrainRange(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.Equal(t, test.expected, result, "Unexpected result")
			}
		})
	}
}

func TestToPowertrainTractionBatteryChargingChargeLimit(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         float64
		expected      uint8
		expectedError bool
	}{
		{
			name:          "Valid Value",
			input:         65,
			expected:      65,
			expectedError: false,
		},
		{
			name:          "Zero Value",
			input:         0.0,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Negative Value",
			input:         -10.8,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Max Float64 Value",
			input:         math.MaxFloat64,
			expected:      math.MaxUint8,
			expectedError: false,
		},
		{
			name:          "Min Float64 Value",
			input:         math.SmallestNonzeroFloat64,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Decimal above 0.5 no rounding",
			input:         65.9,
			expected:      65,
			expectedError: false,
		},
		{
			name:          "Decimal below 0.5 no rounding",
			input:         65.1,
			expected:      65,
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToPowertrainTractionBatteryChargingChargeLimit(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.Equal(t, test.expected, result, "Unexpected result")
			}
		})
	}
}

func TestToPowertrainTractionBatteryChargingIsCharging(t *testing.T) {
	t.Parallel()
	result, err := vss.ToPowertrainTractionBatteryChargingIsCharging(true)
	require.NoError(t, err, "Unexpected error")
	require.Equal(t, true, result, "Unexpected result")
}

func TestToPowertrainTractionBatteryGrossCapacity(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         float64
		expected      uint16
		expectedError bool
	}{
		{
			name:          "Valid Value",
			input:         65,
			expected:      65,
			expectedError: false,
		},
		{
			name:          "Zero Value",
			input:         0.0,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Negative Value",
			input:         -10.8,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Max Float64 Value",
			input:         math.MaxFloat64,
			expected:      math.MaxUint16,
			expectedError: false,
		},
		{
			name:          "Min Float64 Value",
			input:         math.SmallestNonzeroFloat64,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Decimal above 0.5 no rounding",
			input:         65.9,
			expected:      65,
			expectedError: false,
		},
		{
			name:          "Decimal below 0.5 no rounding",
			input:         65.1,
			expected:      65,
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToPowertrainTractionBatteryGrossCapacity(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.Equal(t, test.expected, result, "Unexpected result")
			}
		})
	}
}

func TestToPowertrainTractionBatteryStateOfChargeCurrent(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         float64
		expected      float32
		expectedError bool
	}{
		{
			name:          "Positive Value",
			input:         25.5,
			expected:      25.5,
			expectedError: false,
		},
		{
			name:          "Negative Value",
			input:         -10.8,
			expected:      -10.8,
			expectedError: false,
		},
		{
			name:          "Value too high",
			input:         math.MaxFloat64,
			expected:      math.MaxFloat32,
			expectedError: false,
		},
		{
			name:          "Value too low",
			input:         math.SmallestNonzeroFloat64,
			expected:      math.SmallestNonzeroFloat32,
			expectedError: false,
		},
		{
			name:          "Zero Value",
			input:         0.0,
			expected:      0.0,
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToPowertrainTractionBatteryStateOfChargeCurrent(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.InDeltaf(t, test.expected, result, 1e45, "Unexpected result got %f expected %f", result, test.expected)
			}
		})
	}
}

func TestToPowertrainTransmissionTravelledDistance(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         float64
		expected      float32
		expectedError bool
	}{
		{
			name:          "Positive Value",
			input:         25.5,
			expected:      25.5,
			expectedError: false,
		},
		{
			name:          "Negative Value",
			input:         -10.8,
			expected:      -10.8,
			expectedError: false,
		},
		{
			name:          "Value too high",
			input:         math.MaxFloat64,
			expected:      math.MaxFloat32,
			expectedError: false,
		},
		{
			name:          "Value too low",
			input:         math.SmallestNonzeroFloat64,
			expected:      math.SmallestNonzeroFloat32,
			expectedError: false,
		},
		{
			name:          "Zero Value",
			input:         0.0,
			expected:      0.0,
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToPowertrainTransmissionTravelledDistance(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.InDeltaf(t, test.expected, result, 1e45, "Unexpected result got %f expected %f", result, test.expected)
			}
		})
	}
}

func TestToSpeed(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         float64
		expected      float32
		expectedError bool
	}{
		{
			name:          "Positive Value",
			input:         25.5,
			expected:      25.5,
			expectedError: false,
		},
		{
			name:          "Negative Value",
			input:         -10.8,
			expected:      -10.8,
			expectedError: false,
		},
		{
			name:          "Value too high",
			input:         math.MaxFloat64,
			expected:      math.MaxFloat32,
			expectedError: false,
		},
		{
			name:          "Value too low",
			input:         math.SmallestNonzeroFloat64,
			expected:      math.SmallestNonzeroFloat32,
			expectedError: false,
		},
		{
			name:          "Zero Value",
			input:         0.0,
			expected:      0.0,
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToSpeed(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.InDeltaf(t, test.expected, result, 1e45, "Unexpected result got %f expected %f", result, test.expected)
			}
		})
	}
}

func TestToVehicleIdentificationBrand(t *testing.T) {
	t.Parallel()
	result, err := vss.ToVehicleIdentificationBrand(passThroughString)
	require.NoError(t, err, "Unexpected error")
	require.Equal(t, passThroughString, result, "Unexpected result")
}

func TestToVehicleIdentificationModel(t *testing.T) {
	t.Parallel()
	result, err := vss.ToVehicleIdentificationModel(passThroughString)
	require.NoError(t, err, "Unexpected error")
	require.Equal(t, passThroughString, result, "Unexpected result")
}

func TestToVehicleIdentificationVIN(t *testing.T) {
	t.Parallel()
	result, err := vss.ToVehicleIdentificationVIN(passThroughString)
	require.NoError(t, err, "Unexpected error")
	require.Equal(t, passThroughString, result, "Unexpected result")
}

func TestToVehicleIdentificationYear(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         float64
		expected      uint16
		expectedError bool
	}{
		{
			name:          "Valid Value",
			input:         65,
			expected:      65,
			expectedError: false,
		},
		{
			name:          "Zero Value",
			input:         0.0,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Negative Value",
			input:         -10.8,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Max Float64 Value",
			input:         math.MaxFloat64,
			expected:      math.MaxUint16,
			expectedError: false,
		},
		{
			name:          "Min Float64 Value",
			input:         math.SmallestNonzeroFloat64,
			expected:      0,
			expectedError: false,
		},
		{
			name:          "Decimal above 0.5 no rounding",
			input:         65.9,
			expected:      65,
			expectedError: false,
		},
		{
			name:          "Decimal below 0.5 no rounding",
			input:         65.1,
			expected:      65,
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToVehicleIdentificationYear(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.Equal(t, test.expected, result, "Unexpected result")
			}
		})
	}
}

func TestToPowertrainType(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name          string
		input         string
		expected      string
		expectedError bool
	}{
		{
			name:          "Gasoline",
			input:         "Gasoline",
			expected:      "COMBUSTION",
			expectedError: false,
		},
		{
			name:          "Ethanol",
			input:         "Ethanol",
			expected:      "COMBUSTION",
			expectedError: false,
		},
		{
			name:          "Diesel",
			input:         "Diesel",
			expected:      "COMBUSTION",
			expectedError: false,
		},
		{
			name:          "LPG",
			input:         "LPG",
			expected:      "COMBUSTION",
			expectedError: false,
		},
		{
			name:          "Unknown Fuel Type",
			input:         "UnknownFuelType",
			expected:      "COMBUSTION",
			expectedError: false,
		},
		{
			name:          "Electric",
			input:         "Electric",
			expected:      "ELECTRIC",
			expectedError: false,
		},
	}

	for i := range tests {
		test := tests[i]
		name := test.name
		if name == "" {
			name = fmt.Sprintf("Input: %v", test.input)
		}
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			result, err := vss.ToPowertrainType(test.input)
			if test.expectedError {
				require.Error(t, err, "Expected an error but got none")
			} else {
				require.NoError(t, err, "Unexpected error")
				require.Equal(t, test.expected, result, "Unexpected result")
			}
		})
	}
}
