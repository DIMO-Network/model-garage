// Code generated by github.com/DIMO-Network/model-garage.
package ruptela

// This file is automatically populated with conversion functions for each field of the model struct.
// any conversion functions already defined in this package will be coppied through.
// note: DO NOT mutate the orginalDoc parameter which is shared between all conversion functions.

// ToChassisAxleRow1WheelLeftTirePressure0 converts data from field 'signals.256' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure0(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure1 converts data from field 'signals.257' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure1(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure2 converts data from field 'signals.258' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure2(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure3 converts data from field 'signals.259' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure3(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure4 converts data from field 'signals.260' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure4(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure5 converts data from field 'signals.261' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure5(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure6 converts data from field 'signals.262' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure6(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure7 converts data from field 'signals.263' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure7(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure8 converts data from field 'signals.264' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure8(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure9 converts data from field 'signals.265' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure9(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure10 converts data from field 'signals.266' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure10(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure11 converts data from field 'signals.267' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure11(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure12 converts data from field 'signals.268' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure12(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure13 converts data from field 'signals.269' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure13(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure14 converts data from field 'signals.270' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure14(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure15 converts data from field 'signals.271' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure15(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure16 converts data from field 'signals.272' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure16(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure17 converts data from field 'signals.273' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure17(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure18 converts data from field 'signals.274' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure18(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure19 converts data from field 'signals.275' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure19(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure20 converts data from field 'signals.276' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure20(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure21 converts data from field 'signals.277' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure21(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure22 converts data from field 'signals.278' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure22(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure23 converts data from field 'signals.279' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure23(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure24 converts data from field 'signals.280' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure24(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure25 converts data from field 'signals.281' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure25(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure26 converts data from field 'signals.282' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure26(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure27 converts data from field 'signals.283' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure27(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure28 converts data from field 'signals.284' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure28(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure29 converts data from field 'signals.285' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure29(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure30 converts data from field 'signals.286' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure30(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure31 converts data from field 'signals.287' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure31(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure32 converts data from field 'signals.288' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure32(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure33 converts data from field 'signals.289' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure33(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure34 converts data from field 'signals.290' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure34(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelLeftTirePressure35 converts data from field 'signals.291' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure35(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelLeftTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure0 converts data from field 'signals.256' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure0(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure1 converts data from field 'signals.257' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure1(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure2 converts data from field 'signals.258' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure2(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure3 converts data from field 'signals.259' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure3(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure4 converts data from field 'signals.260' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure4(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure5 converts data from field 'signals.261' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure5(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure6 converts data from field 'signals.262' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure6(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure7 converts data from field 'signals.263' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure7(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure8 converts data from field 'signals.264' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure8(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure9 converts data from field 'signals.265' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure9(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure10 converts data from field 'signals.266' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure10(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure11 converts data from field 'signals.267' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure11(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure12 converts data from field 'signals.268' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure12(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure13 converts data from field 'signals.269' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure13(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure14 converts data from field 'signals.270' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure14(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure15 converts data from field 'signals.271' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure15(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure16 converts data from field 'signals.272' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure16(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure17 converts data from field 'signals.273' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure17(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure18 converts data from field 'signals.274' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure18(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure19 converts data from field 'signals.275' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure19(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure20 converts data from field 'signals.276' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure20(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure21 converts data from field 'signals.277' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure21(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure22 converts data from field 'signals.278' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure22(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure23 converts data from field 'signals.279' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure23(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure24 converts data from field 'signals.280' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure24(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure25 converts data from field 'signals.281' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure25(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure26 converts data from field 'signals.282' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure26(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure27 converts data from field 'signals.283' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure27(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure28 converts data from field 'signals.284' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure28(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure29 converts data from field 'signals.285' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure29(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure30 converts data from field 'signals.286' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure30(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure31 converts data from field 'signals.287' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure31(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure32 converts data from field 'signals.288' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure32(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure33 converts data from field 'signals.289' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure33(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure34 converts data from field 'signals.290' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure34(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow1WheelRightTirePressure35 converts data from field 'signals.291' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure35(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow1WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure0 converts data from field 'signals.256' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure0(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure1 converts data from field 'signals.257' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure1(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure2 converts data from field 'signals.258' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure2(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure3 converts data from field 'signals.259' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure3(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure4 converts data from field 'signals.260' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure4(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure5 converts data from field 'signals.261' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure5(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure6 converts data from field 'signals.262' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure6(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure7 converts data from field 'signals.263' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure7(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure8 converts data from field 'signals.264' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure8(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure9 converts data from field 'signals.265' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure9(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure10 converts data from field 'signals.266' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure10(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure11 converts data from field 'signals.267' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure11(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure12 converts data from field 'signals.268' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure12(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure13 converts data from field 'signals.269' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure13(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure14 converts data from field 'signals.270' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure14(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure15 converts data from field 'signals.271' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure15(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure16 converts data from field 'signals.272' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure16(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure17 converts data from field 'signals.273' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure17(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure18 converts data from field 'signals.274' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure18(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure19 converts data from field 'signals.275' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure19(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure20 converts data from field 'signals.276' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure20(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure21 converts data from field 'signals.277' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure21(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure22 converts data from field 'signals.278' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure22(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure23 converts data from field 'signals.279' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure23(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure24 converts data from field 'signals.280' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure24(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure25 converts data from field 'signals.281' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure25(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure26 converts data from field 'signals.282' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure26(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure27 converts data from field 'signals.283' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure27(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure28 converts data from field 'signals.284' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure28(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure29 converts data from field 'signals.285' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure29(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure30 converts data from field 'signals.286' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure30(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure31 converts data from field 'signals.287' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure31(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure32 converts data from field 'signals.288' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure32(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure33 converts data from field 'signals.289' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure33(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure34 converts data from field 'signals.290' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure34(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelLeftTirePressure35 converts data from field 'signals.291' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure35(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelLeftTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure0 converts data from field 'signals.256' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure0(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure1 converts data from field 'signals.257' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure1(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure2 converts data from field 'signals.258' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure2(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure3 converts data from field 'signals.259' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure3(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure4 converts data from field 'signals.260' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure4(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure5 converts data from field 'signals.261' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure5(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure6 converts data from field 'signals.262' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure6(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure7 converts data from field 'signals.263' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure7(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure8 converts data from field 'signals.264' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure8(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure9 converts data from field 'signals.265' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure9(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure10 converts data from field 'signals.266' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure10(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure11 converts data from field 'signals.267' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure11(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure12 converts data from field 'signals.268' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure12(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure13 converts data from field 'signals.269' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure13(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure14 converts data from field 'signals.270' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure14(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure15 converts data from field 'signals.271' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure15(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure16 converts data from field 'signals.272' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure16(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure17 converts data from field 'signals.273' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure17(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure18 converts data from field 'signals.274' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure18(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure19 converts data from field 'signals.275' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure19(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure20 converts data from field 'signals.276' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure20(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure21 converts data from field 'signals.277' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure21(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure22 converts data from field 'signals.278' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure22(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure23 converts data from field 'signals.279' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure23(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure24 converts data from field 'signals.280' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure24(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure25 converts data from field 'signals.281' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure25(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure26 converts data from field 'signals.282' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure26(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure27 converts data from field 'signals.283' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure27(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure28 converts data from field 'signals.284' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure28(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure29 converts data from field 'signals.285' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure29(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure30 converts data from field 'signals.286' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure30(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure31 converts data from field 'signals.287' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure31(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure32 converts data from field 'signals.288' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure32(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure33 converts data from field 'signals.289' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure33(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure34 converts data from field 'signals.290' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure34(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToChassisAxleRow2WheelRightTirePressure35 converts data from field 'signals.291' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure35(originalDoc []byte, val string) (float64, error) {
	return ToChassisAxleRow2WheelRightTirePressure(val)
}

// ToCurrentLocationAltitude0 converts data from field 'altitude' of type float64 to 'Vehicle.CurrentLocation.Altitude' of type float64.
// Vehicle.CurrentLocation.Altitude: Current altitude relative to WGS 84 reference ellipsoid, as measured at the position of GNSS receiver antenna.
// Unit: 'm'
func ToCurrentLocationAltitude0(originalDoc []byte, val float64) (float64, error) {
	return val / 10, nil
}

// ToCurrentLocationIsRedacted0 converts data from field 'isRedacted' of type bool to 'Vehicle.CurrentLocation.IsRedacted' of type float64.
// Vehicle.CurrentLocation.IsRedacted: Indicates if the latitude and longitude signals at the current timestamp have been redacted using a privacy zone.
func ToCurrentLocationIsRedacted0(originalDoc []byte, val bool) (float64, error) {
	panic("not implemented")
}

// ToCurrentLocationLatitude0 converts data from field 'pos.lat' of type float64 to 'Vehicle.CurrentLocation.Latitude' of type float64.
// Vehicle.CurrentLocation.Latitude: Current latitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
// Unit: 'degrees' Min: '-90' Max: '90'
func ToCurrentLocationLatitude0(originalDoc []byte, val float64) (float64, error) {
	return val / 10000000, nil
}

// ToCurrentLocationLongitude0 converts data from field 'pos.lon' of type float64 to 'Vehicle.CurrentLocation.Longitude' of type float64.
// Vehicle.CurrentLocation.Longitude: Current longitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
// Unit: 'degrees' Min: '-180' Max: '180'
func ToCurrentLocationLongitude0(originalDoc []byte, val float64) (float64, error) {
	return val / 10000000, nil
}

// ToDIMOAftermarketHDOP0 converts data from field 'hdop' of type float64 to 'Vehicle.DIMO.Aftermarket.HDOP' of type float64.
// Vehicle.DIMO.Aftermarket.HDOP: Horizontal dilution of precision of GPS
func ToDIMOAftermarketHDOP0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToDIMOAftermarketNSAT0 converts data from field 'nsat' of type float64 to 'Vehicle.DIMO.Aftermarket.NSAT' of type float64.
// Vehicle.DIMO.Aftermarket.NSAT: Number of sync satellites for GPS
func ToDIMOAftermarketNSAT0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToDIMOAftermarketSSID0 converts data from field 'ssid' of type string to 'Vehicle.DIMO.Aftermarket.SSID' of type string.
// Vehicle.DIMO.Aftermarket.SSID: Service Set Identifier for the wifi.
func ToDIMOAftermarketSSID0(originalDoc []byte, val string) (string, error) {
	return val, nil
}

// ToDIMOAftermarketSSID1 converts data from field 'wifi.ssid' of type string to 'Vehicle.DIMO.Aftermarket.SSID' of type string.
// Vehicle.DIMO.Aftermarket.SSID: Service Set Identifier for the wifi.
func ToDIMOAftermarketSSID1(originalDoc []byte, val string) (string, error) {
	return val, nil
}

// ToDIMOAftermarketWPAState0 converts data from field 'wpa_state' of type string to 'Vehicle.DIMO.Aftermarket.WPAState' of type string.
// Vehicle.DIMO.Aftermarket.WPAState: Indicate the current WPA state for the device's wifi
func ToDIMOAftermarketWPAState0(originalDoc []byte, val string) (string, error) {
	return val, nil
}

// ToDIMOAftermarketWPAState1 converts data from field 'wifi.wpaState' of type string to 'Vehicle.DIMO.Aftermarket.WPAState' of type string.
// Vehicle.DIMO.Aftermarket.WPAState: Indicate the current WPA state for the device's wifi
func ToDIMOAftermarketWPAState1(originalDoc []byte, val string) (string, error) {
	return val, nil
}

// ToExteriorAirTemperature0 converts data from field 'ambientAirTemp' of type float64 to 'Vehicle.Exterior.AirTemperature' of type float64.
// Vehicle.Exterior.AirTemperature: Air temperature outside the vehicle.
// Unit: 'celsius'
func ToExteriorAirTemperature0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToExteriorAirTemperature1 converts data from field 'ambientTemp' of type float64 to 'Vehicle.Exterior.AirTemperature' of type float64.
// Vehicle.Exterior.AirTemperature: Air temperature outside the vehicle.
// Unit: 'celsius'
func ToExteriorAirTemperature1(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToLowVoltageBatteryCurrentVoltage0 converts data from field 'batteryVoltage' of type float64 to 'Vehicle.LowVoltageBattery.CurrentVoltage' of type float64.
// Vehicle.LowVoltageBattery.CurrentVoltage: Current Voltage of the low voltage battery.
// Unit: 'V'
func ToLowVoltageBatteryCurrentVoltage0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToOBDBarometricPressure0 converts data from field 'barometricPressure' of type float64 to 'Vehicle.OBD.BarometricPressure' of type float64.
// Vehicle.OBD.BarometricPressure: PID 33 - Barometric pressure
// Unit: 'kPa'
func ToOBDBarometricPressure0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToOBDCommandedEGR0 converts data from field 'commandedEgr' of type float64 to 'Vehicle.OBD.CommandedEGR' of type float64.
// Vehicle.OBD.CommandedEGR: PID 2C - Commanded exhaust gas recirculation (EGR)
// Unit: 'percent'
func ToOBDCommandedEGR0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToOBDDistanceSinceDTCClear0 converts data from field 'distanceSinceDtcClear' of type float64 to 'Vehicle.OBD.DistanceSinceDTCClear' of type float64.
// Vehicle.OBD.DistanceSinceDTCClear: PID 31 - Distance traveled since codes cleared
// Unit: 'km'
func ToOBDDistanceSinceDTCClear0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToOBDDistanceWithMIL0 converts data from field 'distanceWMil' of type float64 to 'Vehicle.OBD.DistanceWithMIL' of type float64.
// Vehicle.OBD.DistanceWithMIL: PID 21 - Distance traveled with MIL on
// Unit: 'km'
func ToOBDDistanceWithMIL0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToOBDEngineLoad0 converts data from field 'engineLoad' of type float64 to 'Vehicle.OBD.EngineLoad' of type float64.
// Vehicle.OBD.EngineLoad: PID 04 - Engine load in percent - 0 = no load, 100 = full load
// Unit: 'percent'
func ToOBDEngineLoad0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToOBDIntakeTemp0 converts data from field 'intakeTemp' of type float64 to 'Vehicle.OBD.IntakeTemp' of type float64.
// Vehicle.OBD.IntakeTemp: PID 0F - Intake temperature
// Unit: 'celsius'
func ToOBDIntakeTemp0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToOBDLongTermFuelTrim10 converts data from field 'longTermFuelTrim1' of type float64 to 'Vehicle.OBD.LongTermFuelTrim1' of type float64.
// Vehicle.OBD.LongTermFuelTrim1: PID 07 - Long Term (learned) Fuel Trim - Bank 1 - negative percent leaner, positive percent richer
// Unit: 'percent'
func ToOBDLongTermFuelTrim10(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToOBDMAP0 converts data from field 'intakePressure' of type float64 to 'Vehicle.OBD.MAP' of type float64.
// Vehicle.OBD.MAP: PID 0B - Intake manifold pressure
// Unit: 'kPa'
func ToOBDMAP0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToOBDRunTime0 converts data from field 'runTime' of type float64 to 'Vehicle.OBD.RunTime' of type float64.
// Vehicle.OBD.RunTime: PID 1F - Engine run time
// Unit: 's'
func ToOBDRunTime0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToOBDShortTermFuelTrim10 converts data from field 'shortTermFuelTrim1' of type float64 to 'Vehicle.OBD.ShortTermFuelTrim1' of type float64.
// Vehicle.OBD.ShortTermFuelTrim1: PID 06 - Short Term (immediate) Fuel Trim - Bank 1 - negative percent leaner, positive percent richer
// Unit: 'percent'
func ToOBDShortTermFuelTrim10(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToOBDWarmupsSinceDTCClear0 converts data from field 'warmupsSinceDtcClear' of type float64 to 'Vehicle.OBD.WarmupsSinceDTCClear' of type float64.
// Vehicle.OBD.WarmupsSinceDTCClear: PID 30 - Number of warm-ups since codes cleared
func ToOBDWarmupsSinceDTCClear0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToPowertrainCombustionEngineECT0 converts data from field 'coolantTemp' of type float64 to 'Vehicle.Powertrain.CombustionEngine.ECT' of type float64.
// Vehicle.Powertrain.CombustionEngine.ECT: Engine coolant temperature.
// Unit: 'celsius'
func ToPowertrainCombustionEngineECT0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToPowertrainCombustionEngineEngineOilLevel0 converts data from field 'oil' of type float64 to 'Vehicle.Powertrain.CombustionEngine.EngineOilLevel' of type string.
// Vehicle.Powertrain.CombustionEngine.EngineOilLevel: Engine oil level.
func ToPowertrainCombustionEngineEngineOilLevel0(originalDoc []byte, val float64) (string, error) {
	panic("not implemented")
}

// ToPowertrainCombustionEngineEngineOilLevel1 converts data from field 'oilLife' of type float64 to 'Vehicle.Powertrain.CombustionEngine.EngineOilLevel' of type string.
// Vehicle.Powertrain.CombustionEngine.EngineOilLevel: Engine oil level.
func ToPowertrainCombustionEngineEngineOilLevel1(originalDoc []byte, val float64) (string, error) {
	panic("not implemented")
}

// ToPowertrainCombustionEngineEngineOilRelativeLevel0 converts data from field 'oil' of type float64 to 'Vehicle.Powertrain.CombustionEngine.EngineOilRelativeLevel' of type float64.
// Vehicle.Powertrain.CombustionEngine.EngineOilRelativeLevel: Engine oil level as a percentage.
// Unit: 'percent' Min: '0' Max: '100'
func ToPowertrainCombustionEngineEngineOilRelativeLevel0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToPowertrainCombustionEngineMAF0 converts data from field 'maf' of type float64 to 'Vehicle.Powertrain.CombustionEngine.MAF' of type float64.
// Vehicle.Powertrain.CombustionEngine.MAF: Grams of air drawn into engine per second.
// Unit: 'g/s'
func ToPowertrainCombustionEngineMAF0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToPowertrainCombustionEngineSpeed0 converts data from field 'rpm' of type float64 to 'Vehicle.Powertrain.CombustionEngine.Speed' of type float64.
// Vehicle.Powertrain.CombustionEngine.Speed: Engine speed measured as rotations per minute.
// Unit: 'rpm'
func ToPowertrainCombustionEngineSpeed0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToPowertrainCombustionEngineSpeed1 converts data from field 'engineSpeed' of type float64 to 'Vehicle.Powertrain.CombustionEngine.Speed' of type float64.
// Vehicle.Powertrain.CombustionEngine.Speed: Engine speed measured as rotations per minute.
// Unit: 'rpm'
func ToPowertrainCombustionEngineSpeed1(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToPowertrainCombustionEngineTPS0 converts data from field 'throttlePosition' of type float64 to 'Vehicle.Powertrain.CombustionEngine.TPS' of type float64.
// Vehicle.Powertrain.CombustionEngine.TPS: Current throttle position.
// Unit: 'percent'  Max: '100'
func ToPowertrainCombustionEngineTPS0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToPowertrainFuelSystemAbsoluteLevel0 converts data from field 'fuelLevelLiters' of type float64 to 'Vehicle.Powertrain.FuelSystem.AbsoluteLevel' of type float64.
// Vehicle.Powertrain.FuelSystem.AbsoluteLevel: Current available fuel in the fuel tank expressed in liters.
// Unit: 'l'
func ToPowertrainFuelSystemAbsoluteLevel0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToPowertrainFuelSystemRelativeLevel0 converts data from field 'fuelLevel' of type float64 to 'Vehicle.Powertrain.FuelSystem.RelativeLevel' of type float64.
// Vehicle.Powertrain.FuelSystem.RelativeLevel: Level in fuel tank as percent of capacity. 0 = empty. 100 = full.
// Unit: 'percent' Min: '0' Max: '100'
func ToPowertrainFuelSystemRelativeLevel0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToPowertrainFuelSystemRelativeLevel1 converts data from field 'fuelPercentRemaining' of type float64 to 'Vehicle.Powertrain.FuelSystem.RelativeLevel' of type float64.
// Vehicle.Powertrain.FuelSystem.RelativeLevel: Level in fuel tank as percent of capacity. 0 = empty. 100 = full.
// Unit: 'percent' Min: '0' Max: '100'
func ToPowertrainFuelSystemRelativeLevel1(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToPowertrainFuelSystemSupportedFuelTypes0 converts data from field 'fuelType' of type string to 'Vehicle.Powertrain.FuelSystem.SupportedFuelTypes' of type string.
// Vehicle.Powertrain.FuelSystem.SupportedFuelTypes: High level information of fuel types supported
func ToPowertrainFuelSystemSupportedFuelTypes0(originalDoc []byte, val string) (string, error) {
	return val, nil
}

// ToPowertrainRange0 converts data from field 'range' of type float64 to 'Vehicle.Powertrain.Range' of type float64.
// Vehicle.Powertrain.Range: Remaining range in meters using all energy sources available in the vehicle.
// Unit: 'm'
func ToPowertrainRange0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToPowertrainTractionBatteryChargingChargeLimit0 converts data from field 'chargeLimit' of type float64 to 'Vehicle.Powertrain.TractionBattery.Charging.ChargeLimit' of type float64.
// Vehicle.Powertrain.TractionBattery.Charging.ChargeLimit: Target charge limit (state of charge) for battery.
// Unit: 'percent' Min: '0' Max: '100'
func ToPowertrainTractionBatteryChargingChargeLimit0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToPowertrainTractionBatteryChargingIsCharging0 converts data from field 'charging' of type bool to 'Vehicle.Powertrain.TractionBattery.Charging.IsCharging' of type float64.
// Vehicle.Powertrain.TractionBattery.Charging.IsCharging: True if charging is ongoing. Charging is considered to be ongoing if energy is flowing from charger to vehicle.
func ToPowertrainTractionBatteryChargingIsCharging0(originalDoc []byte, val bool) (float64, error) {
	panic("not implemented")
}

// ToPowertrainTractionBatteryCurrentPower0 converts data from field 'charger.power' of type float64 to 'Vehicle.Powertrain.TractionBattery.CurrentPower' of type float64.
// Vehicle.Powertrain.TractionBattery.CurrentPower: Current electrical energy flowing in/out of battery. Positive = Energy flowing in to battery, e.g. during charging. Negative = Energy flowing out of battery, e.g. during driving.
// Unit: 'W'
func ToPowertrainTractionBatteryCurrentPower0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToPowertrainTractionBatteryGrossCapacity0 converts data from field 'batteryCapacity' of type float64 to 'Vehicle.Powertrain.TractionBattery.GrossCapacity' of type float64.
// Vehicle.Powertrain.TractionBattery.GrossCapacity: Gross capacity of the battery.
// Unit: 'kWh'
func ToPowertrainTractionBatteryGrossCapacity0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToPowertrainTractionBatteryStateOfChargeCurrent0 converts data from field 'soc' of type float64 to 'Vehicle.Powertrain.TractionBattery.StateOfCharge.Current' of type float64.
// Vehicle.Powertrain.TractionBattery.StateOfCharge.Current: Physical state of charge of the high voltage battery, relative to net capacity. This is not necessarily the state of charge being displayed to the customer.
// Unit: 'percent' Min: '0' Max: '100.0'
func ToPowertrainTractionBatteryStateOfChargeCurrent0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToPowertrainTransmissionTravelledDistance0 converts data from field 'odometer' of type float64 to 'Vehicle.Powertrain.Transmission.TravelledDistance' of type float64.
// Vehicle.Powertrain.Transmission.TravelledDistance: Odometer reading, total distance travelled during the lifetime of the transmission.
// Unit: 'km'
func ToPowertrainTransmissionTravelledDistance0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToPowertrainType0 converts data from field 'fuelType' of type string to 'Vehicle.Powertrain.Type' of type string.
// Vehicle.Powertrain.Type: Defines the powertrain type of the vehicle.
func ToPowertrainType0(originalDoc []byte, val string) (string, error) {
	return val, nil
}

// ToSpeed0 converts data from field 'vehicleSpeed' of type float64 to 'Vehicle.Speed' of type float64.
// Vehicle.Speed: Vehicle speed.
// Unit: 'km/h'
func ToSpeed0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToSpeed1 converts data from field 'speed' of type float64 to 'Vehicle.Speed' of type float64.
// Vehicle.Speed: Vehicle speed.
// Unit: 'km/h'
func ToSpeed1(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}
