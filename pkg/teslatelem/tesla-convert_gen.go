// Code generated by github.com/DIMO-Network/model-garage DO NOT EDIT.
package teslatelem

import (
	"errors"
	"fmt"

	"github.com/DIMO-Network/model-garage/pkg/vss"
	"github.com/teslamotors/fleet-telemetry/protos"
	"google.golang.org/protobuf/proto"
)

type Value_StringValue = protos.Value_StringValue

func SignalsFromPayload(baseSignal vss.Signal, data []byte) ([]vss.Signal, []error) {
	var pl protos.Payload
	if err := proto.Unmarshal(data, &pl); err != nil {
		return nil, []error{err}
	}

	ts := pl.GetCreatedAt().AsTime()
	ret := make([]vss.Signal, 0)
	var retErrs []error

	for _, data := range pl.GetData() {
		switch data.Key.String() {
		case "TpmsPressureFl":
			val0, err := ChassisAxleRow1WheelLeftTirePressureFromV2Data(data.GetValue())
			if err != nil {
				retErrs = append(retErrs, fmt.Errorf("failed to convert 'TpmsPressureFl': %w", err))
			} else {
				sig := vss.Signal{
					TokenID:   baseSignal.TokenID,
					Timestamp: ts,
					Source:    baseSignal.Source,
					Name:      "chassisAxleRow1WheelLeftTirePressure",
				}
				sig.SetValue(val0)
				ret = append(ret, sig)
			}

		case "TpmsPressureFr":
			val0, err := ChassisAxleRow1WheelRightTirePressureFromV2Data(data.GetValue())
			if err != nil {
				retErrs = append(retErrs, fmt.Errorf("failed to convert 'TpmsPressureFr': %w", err))
			} else {
				sig := vss.Signal{
					TokenID:   baseSignal.TokenID,
					Timestamp: ts,
					Source:    baseSignal.Source,
					Name:      "chassisAxleRow1WheelRightTirePressure",
				}
				sig.SetValue(val0)
				ret = append(ret, sig)
			}

		case "TpmsPressureRl":
			val0, err := ChassisAxleRow2WheelLeftTirePressureFromV2Data(data.GetValue())
			if err != nil {
				retErrs = append(retErrs, fmt.Errorf("failed to convert 'TpmsPressureRl': %w", err))
			} else {
				sig := vss.Signal{
					TokenID:   baseSignal.TokenID,
					Timestamp: ts,
					Source:    baseSignal.Source,
					Name:      "chassisAxleRow2WheelLeftTirePressure",
				}
				sig.SetValue(val0)
				ret = append(ret, sig)
			}

		case "TpmsPressureRr":
			val0, err := ChassisAxleRow2WheelRightTirePressureFromV2Data(data.GetValue())
			if err != nil {
				retErrs = append(retErrs, fmt.Errorf("failed to convert 'TpmsPressureRr': %w", err))
			} else {
				sig := vss.Signal{
					TokenID:   baseSignal.TokenID,
					Timestamp: ts,
					Source:    baseSignal.Source,
					Name:      "chassisAxleRow2WheelRightTirePressure",
				}
				sig.SetValue(val0)
				ret = append(ret, sig)
			}

		}
	}

	return ret, retErrs
}

// ChassisAxleRow1WheelLeftTirePressureFromData converts the given JSON data to a float64.
func ChassisAxleRow1WheelLeftTirePressureFromV2Data(result *protos.Value) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(*protos.Value_StringValue)
	if ok {
		ret, err = ToChassisAxleRow1WheelLeftTirePressure0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'TpmsPressureFl': %w", err))
	}

	return ret, errs
}

// ChassisAxleRow1WheelRightTirePressureFromData converts the given JSON data to a float64.
func ChassisAxleRow1WheelRightTirePressureFromV2Data(result *protos.Value) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(*protos.Value_StringValue)
	if ok {
		ret, err = ToChassisAxleRow1WheelRightTirePressure0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'TpmsPressureFr': %w", err))
	}

	return ret, errs
}

// ChassisAxleRow2WheelLeftTirePressureFromData converts the given JSON data to a float64.
func ChassisAxleRow2WheelLeftTirePressureFromV2Data(result *protos.Value) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(*protos.Value_StringValue)
	if ok {
		ret, err = ToChassisAxleRow2WheelLeftTirePressure0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'TpmsPressureRl': %w", err))
	}

	return ret, errs
}

// ChassisAxleRow2WheelRightTirePressureFromData converts the given JSON data to a float64.
func ChassisAxleRow2WheelRightTirePressureFromV2Data(result *protos.Value) (ret float64, err error) {
	var errs error
	val0, ok := result.Value().(*protos.Value_StringValue)
	if ok {
		ret, err = ToChassisAxleRow2WheelRightTirePressure0(val0)
		if err == nil {
			return ret, nil
		}
		errs = errors.Join(errs, fmt.Errorf("failed to convert 'TpmsPressureRr': %w", err))
	}

	return ret, errs
}
