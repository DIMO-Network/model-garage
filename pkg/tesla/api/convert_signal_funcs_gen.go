// Code generated by github.com/DIMO-Network/model-garage.
package api

// This file is automatically populated with conversion functions for each field of the model struct.
// any conversion functions already defined in this package will be coppied through.
// note: DO NOT mutate the orginalDoc parameter which is shared between all conversion functions.

// ToChassisAxleRow1WheelLeftTirePressure0 converts data from field 'vehicle_state.tpms_pressure_fl' of type float64 to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure0(originalDoc []byte, val float64) (float64, error) {
	return barsToKilopascals(val), nil
}

// ToChassisAxleRow1WheelRightTirePressure0 converts data from field 'vehicle_state.tpms_pressure_fr' of type float64 to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure0(originalDoc []byte, val float64) (float64, error) {
	return barsToKilopascals(val), nil
}

// ToChassisAxleRow2WheelLeftTirePressure0 converts data from field 'vehicle_state.tpms_pressure_rl' of type float64 to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure0(originalDoc []byte, val float64) (float64, error) {
	return barsToKilopascals(val), nil
}

// ToChassisAxleRow2WheelRightTirePressure0 converts data from field 'vehicle_state.tpms_pressure_rr' of type float64 to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure0(originalDoc []byte, val float64) (float64, error) {
	return barsToKilopascals(val), nil
}

// ToCurrentLocationLatitude0 converts data from field 'drive_state.latitude' of type float64 to 'Vehicle.CurrentLocation.Latitude' of type float64.
// Vehicle.CurrentLocation.Latitude: Current latitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
// Unit: 'degrees' Min: '-90' Max: '90'
func ToCurrentLocationLatitude0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToCurrentLocationLongitude0 converts data from field 'drive_state.longitude' of type float64 to 'Vehicle.CurrentLocation.Longitude' of type float64.
// Vehicle.CurrentLocation.Longitude: Current longitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
// Unit: 'degrees' Min: '-180' Max: '180'
func ToCurrentLocationLongitude0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToExteriorAirTemperature0 converts data from field 'climate_state.outside_temp' of type float64 to 'Vehicle.Exterior.AirTemperature' of type float64.
// Vehicle.Exterior.AirTemperature: Air temperature outside the vehicle.
// Unit: 'celsius'
func ToExteriorAirTemperature0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToPowertrainRange0 converts data from field 'charge_state.battery_range' of type float64 to 'Vehicle.Powertrain.Range' of type float64.
// Vehicle.Powertrain.Range: Remaining range in meters using all energy sources available in the vehicle.
// Unit: 'm'
func ToPowertrainRange0(originalDoc []byte, val float64) (float64, error) {
	// Note: We are converting to kilometers here, breaking with VSS. We need to fix this at some point.
	return milesToKilometers(val), nil
}

// ToPowertrainTractionBatteryChargingAddedEnergy0 converts data from field 'charge_state.charge_energy_added' of type float64 to 'Vehicle.Powertrain.TractionBattery.Charging.AddedEnergy' of type float64.
// Vehicle.Powertrain.TractionBattery.Charging.AddedEnergy: Amount of charge added to the high voltage battery during the current charging session, expressed in kilowatt-hours.
// Unit: 'kWh'
func ToPowertrainTractionBatteryChargingAddedEnergy0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToPowertrainTractionBatteryChargingChargeLimit0 converts data from field 'charge_state.charge_limit_soc' of type float64 to 'Vehicle.Powertrain.TractionBattery.Charging.ChargeLimit' of type float64.
// Vehicle.Powertrain.TractionBattery.Charging.ChargeLimit: Target charge limit (state of charge) for battery.
// Unit: 'percent' Min: '0' Max: '100'
func ToPowertrainTractionBatteryChargingChargeLimit0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToPowertrainTractionBatteryChargingIsCharging0 converts data from field 'charge_state.charging_state' of type string to 'Vehicle.Powertrain.TractionBattery.Charging.IsCharging' of type float64.
// Vehicle.Powertrain.TractionBattery.Charging.IsCharging: True if charging is ongoing. Charging is considered to be ongoing if energy is flowing from charger to vehicle.
func ToPowertrainTractionBatteryChargingIsCharging0(originalDoc []byte, val string) (float64, error) {
	if val == "Starting" || val == "Charging" {
		return 1, nil
	}
	return 0, nil
}

// ToPowertrainTractionBatteryCurrentPower0 converts data from field 'drive_state.power' of type float64 to 'Vehicle.Powertrain.TractionBattery.CurrentPower' of type float64.
// Vehicle.Powertrain.TractionBattery.CurrentPower: Current electrical energy flowing in/out of battery. Positive = Energy flowing in to battery, e.g. during charging. Negative = Energy flowing out of battery, e.g. during driving.
// Unit: 'W'
func ToPowertrainTractionBatteryCurrentPower0(originalDoc []byte, val float64) (float64, error) {
	res := -kilowattsToWatts(val)
	if res == 0 {
		// Avoid returning -0.0 in the common case where val is 0.0.
		return 0, nil
	}
	return res, nil
}

// ToPowertrainTractionBatteryStateOfChargeCurrent0 converts data from field 'charge_state.battery_level' of type float64 to 'Vehicle.Powertrain.TractionBattery.StateOfCharge.Current' of type float64.
// Vehicle.Powertrain.TractionBattery.StateOfCharge.Current: Physical state of charge of the high voltage battery, relative to net capacity. This is not necessarily the state of charge being displayed to the customer.
// Unit: 'percent' Min: '0' Max: '100.0'
func ToPowertrainTractionBatteryStateOfChargeCurrent0(originalDoc []byte, val float64) (float64, error) {
	return val, nil
}

// ToPowertrainTransmissionTravelledDistance0 converts data from field 'vehicle_state.odometer' of type float64 to 'Vehicle.Powertrain.Transmission.TravelledDistance' of type float64.
// Vehicle.Powertrain.Transmission.TravelledDistance: Odometer reading, total distance travelled during the lifetime of the transmission.
// Unit: 'km'
func ToPowertrainTransmissionTravelledDistance0(originalDoc []byte, val float64) (float64, error) {
	return milesToKilometers(val), nil
}

// ToSpeed0 converts data from field 'drive_state.speed' of type float64 to 'Vehicle.Speed' of type float64.
// Vehicle.Speed: Vehicle speed.
// Unit: 'km/h'
func ToSpeed0(originalDoc []byte, val float64) (float64, error) {
	return milesToKilometers(val), nil
}
