// Code generated by github.com/DIMO-Network/model-garage DO NOT EDIT.
package {{.Package}}

import (
    "fmt"
    "strconv"

    "github.com/DIMO-Network/model-garage/pkg/tesla/telemetry/unit"
	"github.com/teslamotors/fleet-telemetry/protos"
	"github.com/DIMO-Network/model-garage/pkg/vss"
)

func ProcessPayload(payload *protos.Payload, tokenID uint32, source string) ([]vss.Signal, []error) {
    var out []vss.Signal
    var outErr []error

    ts := payload.GetCreatedAt().AsTime()

    for _, d := range payload.GetData() {
        switch d.GetKey() {
        {{- range .Conversions}}
        case protos.Field_{{.TeslaField}}:
            signals, errs := Convert{{.TeslaField}}(d.GetValue(), tokenID, ts, source)
            out = append(out, signals...)
            outErr = append(outErr, errs...)
        {{- end}}
        }
    }

    return out, outErr
}

{{range .Conversions}}
{{- $teslaField := .TeslaField}}
{{- $goInputType := .GoInputType}}
func Convert{{.TeslaField}}(v *protos.Value, tokenID uint32, ts time.Time, source string) ([]vss.Signal, []error) {
    var tvf {{.GoInputType}}
    switch tv := v.Value.(type) {
    case *protos.{{.WrapperName}}:
        tvf = tv.{{.WrapperFieldName}}
    {{- if .Parser}}
    case *protos.Value_StringValue:
        var err error
        tvf, err = parse.{{.Parser}}(tv.StringValue)
        if err != nil {
            return nil, []error{fmt.Errorf("failed to parse string %q for field {{.TeslaField}} into {{$goInputType}}: %w", tv.StringValue, err)}    
        }
    {{- end}}
    case *protos.Value_Invalid:
        return nil, nil
    default:
        {{- if .Parser}}
            return nil, []error{fmt.Errorf("type of {{.TeslaField}} is %T instead of the expected {{$goInputType}} or string", tv)}
        {{- else}}
            return nil, []error{fmt.Errorf("type of {{.TeslaField}} is %T instead of the expected {{$goInputType}}", tv)}
        {{- end}}
    }
    var sigs []vss.Signal
    var errs []error
    {{- range .VSSSignals}}
    {{- if .ConvertFunc}}
    utv := unit.{{.ConvertFunc}}(tvf)
    if res, err := Convert{{$teslaField}}To{{.GoVSSName}}(utv); err != nil {
    {{- else}}
    if res, err := Convert{{$teslaField}}To{{.GoVSSName}}(tvf); err != nil {
    {{- end}}
        errs = append(errs, err)
    } else {
        sig := vss.Signal{
            TokenID: tokenID,
            Name: "{{.JSONName}}",
            Timestamp: ts,
            Source: source,
        }
        sig.SetValue(res)
        sigs = append(sigs, sig)
    }
    {{- end}}
    return sigs, errs
}
{{end}}
