// Code generated by "model-garage" DO NOT EDIT.
package {{ .PackageName }}

var (
	// errInvalidType is returned when a field is not of the expected type or not found.
	errInvalidType = errors.New("invalid type")

	// errNotFound is returned when a field is not found.
	errNotFound = errors.New("not found")	
)

// IsNotFound returns true if the error is of type errNotFound.
func IsNotFound(err error) bool {
	return errors.Is(err, errNotFound)
}

// IsInvalidType returns true if the error is of type errInvalidType.
func IsInvalidType(err error) bool {
	return errors.Is(err, errInvalidType)
}


// FromData creates a new Vehicle from a map of data. Using defined conversion functions.
// If skipNotFound is true, the function will not return an error if a key is not found. 
// instead the field will be set to the zero value of the type.
func FromData(jsonData []byte, skipNotFound bool) (*Vehicle, error) {
	vehicle := Vehicle{}

{{ $first := true }}
{{- range .Signals }}
	{{ if not .Conversion }} {{ continue }} {{ end }}
	{{ if $first }}
	var err error
	var result gjson.Result
	{{ $first = false }} {{ end }}

	// convert {{ .Conversion.OriginalName }} to {{ .GOName }}
	result = gjson.GetBytes(jsonData, "{{ .Conversion.OriginalName }}")
	if result.Exists() {
		{{ if .Conversion.IsArray -}}
		if !result.IsArray() {
			return nil, fmt.Errorf("%w, field '{{ .Conversion.OriginalName }}' is not an array", errInvalidType)
		}
		slice{{ .GOName}} := make([]{{ .Conversion.OriginalType }}, len(result.Array()))
		for i, res := range result.Array() {
			v, ok := res.Value().({{ .Conversion.OriginalType }})
			if !ok{
				return nil, fmt.Errorf("%w, field '{{ .Conversion.OriginalName }}' array element %d is not of type {{ .Conversion.OriginalType }}", errInvalidType, i)
			}
			slice{{ .GOName}}[i] = v
		}
		vehicle.{{ .GOName }}, err = {{ convertName . }}(slice{{ .GOName}} )
		if err != nil {
			return nil, fmt.Errorf("failed to convert '{{ .Conversion.OriginalName }}': %w", err)
		}
	{{ else -}}
		val{{ .GOName}}, ok := result.Value().({{ .Conversion.OriginalType }})
		if !ok {
			return nil, fmt.Errorf("%w, field '{{ .Conversion.OriginalName }}' is not of type {{ .Conversion.OriginalType }}", errInvalidType)
		}
		vehicle.{{ .GOName }}, err = {{ convertName . }}(val{{ .GOName}})
		if err != nil {
			return nil, fmt.Errorf("failed to convert '{{ .Conversion.OriginalName }}': %w", err)
		}
	{{ end -}}
	} else if !skipNotFound{
		return nil, fmt.Errorf("%w, field '{{ .Conversion.OriginalName }}'", errNotFound)
	}
{{- end }}
	return &vehicle, nil
}
