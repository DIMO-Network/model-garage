// Code generated by "model-garage" DO NOT EDIT.
package {{ .PackageName }}

// errInvalidType is returned when a field is not of the expected type or not found.
var errInvalidType = errors.New("invalid type")


// IsInvalidType returns true if the error is of type errInvalidType.
func IsInvalidType(err error) bool {
	return errors.Is(err, errInvalidType)
}


// FromData creates a new {{ .ModelName }} from JSON data. Using defined conversion functions.
// if a filed is not found it will not be set
func FromData(jsonData []byte) (*{{ .ModelName }}, error) {
	{{ $varName := lower .ModelName -}}
	var {{ $varName }} {{ .ModelName -}}
{{ $first := true -}}
{{- range $idx, $sig := .Signals }}
	{{ if eq (len $sig.Conversions) 0 }} {{ continue }} {{ end -}}
	{{ if $first -}}
	var errs error
	var err error
	{{ $first = false }} {{ end }}

	{{ $varName }}.{{ $sig.GOName }}, err = {{ $sig.GOName }}FromData(jsonData)
	if err != nil {
		errs = errors.Join(errs, fmt.Errorf("failed to get '{{ $sig.GOName }}': %w", err))
	}
{{- end }}
	return &{{ $varName }}, errs
}


{{- range $i, $sig := .Signals }}
// {{ $sig.GOName }}FromData converts the given JSON data to a {{ $sig.GOType }}.
func {{ .GOName }}FromData(jsonData []byte) (ret {{ .GOType }}, err error) {
    var errs error
    var result gjson.Result

	{{- range $j, $conv := .Conversions }}
    result = gjson.GetBytes(jsonData, "{{ $conv.OriginalName }}")
    if result.Exists() {
		{{ if $conv.IsArray -}}
		if result.IsArray() {
			slice{{ $sig.GOName}} := make([]{{ $conv.OriginalType }}, len(result.Array()))
			for i, res := range result.Array() {
				v, ok := res.Value().({{ $conv.OriginalType }})
				if ok{
					slice{{ $sig.GOName}}[i] = v
				} else {
					errs = errors.Join(errs, fmt.Errorf("%w, field '{{ $conv.OriginalName }}' array element %d is not of type '{{ $conv.OriginalType }}' got '%v' of type '%T'", errInvalidType, i, res.Value(), res.Value()))
				}
			}
			retVal, err = {{ convertName $sig }}{{ $j }}(slice{{ $sig.GOName}})
			if err == nil {
				{{ if $sig.IsArray -}}
				return retVal, nil
				{{ else -}}
				return &retVal, nil
				{{ end -}}
			}
			errs = errors.Join(errs, fmt.Errorf("failed to convert '{{ $sig.Conversion.OriginalName }}': %w", err))
		} else {
			errs = errros.Join(errs, fmt.Errorf("%w, field '{{ $conv.OriginalName }}' is not an array", errInvalidType))
		}
		{{ else -}}
        val, ok := result.Value().({{ $conv.OriginalType }})
        if ok {
            retVal, err := {{ convertName $sig }}{{ $j }}(val)
            if err == nil {
				{{ if $sig.IsArray -}}
				return retVal, nil
				{{ else -}}
				return &retVal, nil
				{{ end -}}
            }
            errs = errors.Join(errs, fmt.Errorf("failed to convert '{{ $conv.OriginalName }}': %w", err))
        } else {
            errs = errors.Join(errs, fmt.Errorf("%w, field '{{ $conv.OriginalName }}' is not of type '{{ $conv.OriginalType }}' got '%v' of type '%T'", errInvalidType, result.Value(), result.Value()))
        }
		{{- end }}
    }
	{{- end }}

    return ret, errs
}
{{- end }}
