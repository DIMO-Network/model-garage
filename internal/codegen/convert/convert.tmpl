// Code generated by "model-garage" DO NOT EDIT.
package {{ .PackageName }}

var (
	// errInvalidType is returned when a field is not of the expected type or not found.
	errInvalidType = errors.New("invalid type")
)

// IsInvalidType returns true if the error is of type errInvalidType.
func IsInvalidType(err error) bool {
	return errors.Is(err, errInvalidType)
}


// FromData creates a new {{ .ModelName }} from a map of data. Using defined conversion functions.
// If skipNotFound is true, the function will not return an error if a key is not found. 
// instead the field will be set to the zero value of the type.
func FromData(jsonData []byte) (*{{ .ModelName }}, error) {
	{{ $varName := lower .ModelName}}
	{{ $varName }} := {{ .ModelName }}{}

{{ $first := true }}
{{- range $idx, $sig := .Signals }}
	{{ if not $sig.Conversion }} {{ continue }} {{ end }}
	{{ if $first }}
	var err error
	var result gjson.Result
	{{ $first = false }} {{ end }}

	// convert {{ $sig.Conversion.OriginalName }} to {{ $sig.GOName }}
	result = gjson.GetBytes(jsonData, "{{ $sig.Conversion.OriginalName }}")
	if result.Exists() {
		{{ if $sig.Conversion.IsArray -}}
		if !result.IsArray() {
			return nil, fmt.Errorf("%w, field '{{ $sig.Conversion.OriginalName }}' is not an array", errInvalidType)
		}
		slice{{ $sig.GOName}} := make([]{{ $sig.Conversion.OriginalType }}, len(result.Array()))
		for i, res := range result.Array() {
			v, ok := res.Value().({{ $sig.Conversion.OriginalType }})
			if !ok{
				return nil, fmt.Errorf("%w, field '{{ $sig.Conversion.OriginalName }}' array element %d is not of type {{ $sig.Conversion.OriginalType }}", errInvalidType, i)
			}
			slice{{ $sig.GOName}}[i] = v
		}
		{{ $varName }}.{{ $sig.GOName }}, err = {{ convertName $sig }}(slice{{ $sig.GOName}} )
		if err != nil {
			return nil, fmt.Errorf("failed to convert '{{ $sig.Conversion.OriginalName }}': %w", err)
		}
	{{ else -}}
		val{{ $sig.GOName}}, ok := result.Value().({{ $sig.Conversion.OriginalType }})
		if !ok {
			return nil, fmt.Errorf("%w, field '{{ $sig.Conversion.OriginalName }}' is not of type {{ $sig.Conversion.OriginalType }}", errInvalidType)
		}
		{{ $varName }}.{{ $sig.GOName }}, err = {{ convertName $sig }}(val{{ $sig.GOName}})
		if err != nil {
			return nil, fmt.Errorf("failed to convert '{{ $sig.Conversion.OriginalName }}': %w", err)
		}
	{{ end -}}
	}
{{- end }}
	return &{{ $varName }}, nil
}
